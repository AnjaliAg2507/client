{"ast":null,"code":"import _toConsumableArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js\";\n/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\nvar Quiz = function Quiz() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isLoading = _useState10[0],\n    setIsLoading = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasPostedResults = _useState12[0],\n    setHasPostedResults = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    answeredQuestions = _useState14[0],\n    setAnsweredQuestions = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    easyCorrectCount = _useState16[0],\n    setEasyCorrectCount = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    mediumCorrectCount = _useState18[0],\n    setMediumCorrectCount = _useState18[1];\n  var _useState19 = useState(0),\n    _useState20 = _slicedToArray(_useState19, 2),\n    hardCorrectCount = _useState20[0],\n    setHardCorrectCount = _useState20[1];\n  var _useState21 = useState('easy'),\n    _useState22 = _slicedToArray(_useState21, 2),\n    difficulty = _useState22[0],\n    setDifficulty = _useState22[1];\n  useEffect(function () {\n    axios.get('http://localhost:8000/api/questions').then(function (response) {\n      var easyQuestions = _.shuffle(response.data.filter(function (q) {\n        return q.difficulty === 'easy';\n      }));\n      var mediumQuestions = response.data.filter(function (q) {\n        return q.difficulty === 'medium';\n      });\n      var hardQuestions = response.data.filter(function (q) {\n        return q.difficulty === 'hard';\n      });\n      setQuestions([].concat(_toConsumableArray(easyQuestions), _toConsumableArray(mediumQuestions), _toConsumableArray(hardQuestions)));\n      setIsLoading(false);\n    }).catch(function (error) {\n      console.log(error);\n      setIsLoading(false);\n    });\n  }, []);\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect, difficulty) {\n    var questionScore = 0;\n    if (isCorrect) {\n      if (difficulty === 'easy') {\n        questionScore = 1;\n        setEasyCorrectCount(easyCorrectCount + 1);\n      } else if (difficulty === 'medium') {\n        questionScore = 2;\n        setMediumCorrectCount(mediumCorrectCount + 1);\n      } else if (difficulty === 'hard') {\n        questionScore = 3;\n        setHardCorrectCount(hardCorrectCount + 1);\n      }\n      setScore(score + questionScore);\n    }\n    setAnsweredQuestions(answeredQuestions + 1);\n    var nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n    if (answeredQuestions >= 9) {\n      setShowScore(true);\n    }\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 181,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 9\n    }\n  }, \"Loading\") : showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    hasPostedResults: hasPostedResults,\n    setHasPostedResults: setHasPostedResults,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/10\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-level\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 13\n    }\n  }, \"Difficulty level: \", questions[currentQuestion].difficulty)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer, questions[currentQuestion].difficulty);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  }))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","useEffect","_","Link","Score","axios","Quiz","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","hasPostedResults","setHasPostedResults","_useState13","_useState14","answeredQuestions","setAnsweredQuestions","_useState15","_useState16","easyCorrectCount","setEasyCorrectCount","_useState17","_useState18","mediumCorrectCount","setMediumCorrectCount","_useState19","_useState20","hardCorrectCount","setHardCorrectCount","_useState21","_useState22","difficulty","setDifficulty","get","then","response","easyQuestions","shuffle","data","filter","q","mediumQuestions","hardQuestions","concat","_toConsumableArray","catch","error","console","log","handleAnswerOptionClick","isCorrect","questionScore","nextQuestion","length","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","Fragment","question","chunk","options","map","optionChunk","option","onClick","answer"],"sources":["/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [answeredQuestions, setAnsweredQuestions] = useState(0);\n  const [easyCorrectCount, setEasyCorrectCount] = useState(0);\n  const [mediumCorrectCount, setMediumCorrectCount] = useState(0);\n  const [hardCorrectCount, setHardCorrectCount] = useState(0);\n  const [difficulty, setDifficulty] = useState('easy');\n  useEffect(() => {\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        const easyQuestions = _.shuffle(response.data.filter((q) => q.difficulty === 'easy'));\n        const mediumQuestions = response.data.filter((q) => q.difficulty === 'medium');\n        const hardQuestions = response.data.filter((q) => q.difficulty === 'hard');\n        setQuestions([...easyQuestions, ...mediumQuestions, ...hardQuestions]);\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n   const handleAnswerOptionClick = (isCorrect, difficulty) => \n   {\n    let questionScore = 0;\n    if (isCorrect) \n    {\n      if (difficulty === 'easy') \n      {\n        questionScore = 1;\n        setEasyCorrectCount(easyCorrectCount + 1);\n      } \n      else if (difficulty === 'medium') \n      {\n        questionScore = 2;\n        setMediumCorrectCount(mediumCorrectCount + 1);\n      }else if (difficulty === 'hard') \n      {\n        questionScore = 3;\n        setHardCorrectCount(hardCorrectCount + 1);\n      }\n      setScore(score + questionScore);\n    }\nsetAnsweredQuestions(answeredQuestions + 1);\nconst nextQuestion = currentQuestion + 1;\nif (nextQuestion < questions.length) \n{\nsetCurrentQuestion(nextQuestion);\n} else \n{\nsetShowScore(true);\n}\n\n\n  if (answeredQuestions >= 9) {\n    setShowScore(true);\n  }\n\n};\n\n\n\n return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/10\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">\n              Difficulty level: {questions[currentQuestion].difficulty}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(\n                        option === questions[currentQuestion].answer,\n                        questions[currentQuestion].difficulty\n                      )\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n"],"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"},"metadata":{},"sourceType":"module"}