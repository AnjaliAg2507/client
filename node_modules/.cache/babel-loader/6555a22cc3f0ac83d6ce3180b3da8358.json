{"ast":null,"code":"import _without from \"lodash/without\";\nimport _pick from \"lodash/pick\";\nimport _keys from \"lodash/keys\";\nimport _isNil from \"lodash/isNil\";\nimport _isFunction from \"lodash/isFunction\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _difference from \"lodash/difference\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport React from \"react\";\nimport * as Events from \"./events\";\nimport isEqual from \"react-fast-compare\";\nimport { VictoryTransition } from \"../victory-transition/victory-transition\";\n\n// DISCLAIMER:\n// This file is not currently tested, and it is first on the list of files\n// to refactor in our current refactoring effort. Please do not make changes\n// to this file without manual testing and/or refactoring and adding tests.\nvar datumHasXandY = function datumHasXandY(datum) {\n  return !_isNil(datum._x) && !_isNil(datum._y);\n}; //  used for checking state changes. Expected components can be passed in via options\n\nvar defaultComponents = [{\n  name: \"parent\",\n  index: \"parent\"\n}, {\n  name: \"data\"\n}, {\n  name: \"labels\"\n}];\nexport function addEvents(WrappedComponent) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  // @ts-expect-error \"TS2545: A mixin class must have a constructor with a single rest parameter of type 'any[]'.\"\n  var AddEventsMixin = /*#__PURE__*/function (_WrappedComponent) {\n    _inherits(AddEventsMixin, _WrappedComponent);\n    var _super = _createSuper(AddEventsMixin);\n    function AddEventsMixin(props) {\n      var _this;\n      _classCallCheck(this, AddEventsMixin);\n      _this = _super.call(this, props);\n      _this.state = {};\n      _this.getEventState = Events.getEventState.bind(_assertThisInitialized(_this));\n      _this.getScopedEvents = Events.getScopedEvents.bind(_assertThisInitialized(_this));\n      _this.getEvents = function (p, target, eventKey) {\n        return Events.getEvents.call(_assertThisInitialized(_this), p, target, eventKey, _this.getScopedEvents);\n      };\n      _this.externalMutations = _this.getExternalMutations(_this.props);\n      _this.calculatedState = _this.getStateChanges(_this.props);\n      _this.globalEvents = {};\n      _this.prevGlobalEventKeys = [];\n      _this.boundGlobalEvents = {};\n      _this.cacheValues(_this.getCalculatedValues(props));\n      return _this;\n    }\n    _createClass(AddEventsMixin, [{\n      key: \"shouldComponentUpdate\",\n      value: function shouldComponentUpdate(nextProps) {\n        var externalMutations = this.getExternalMutations(nextProps); // @ts-expect-error \"Property 'animating' does not exist on type EventMixinCommonProps\"\n\n        var animating = this.props.animating || this.props.animate;\n        var newMutation = !isEqual(externalMutations, this.externalMutations);\n        if (animating || newMutation) {\n          this.cacheValues(this.getCalculatedValues(nextProps));\n          this.externalMutations = externalMutations;\n          this.applyExternalMutations(nextProps, externalMutations);\n          return true;\n        }\n        var calculatedState = this.getStateChanges(nextProps);\n        if (!isEqual(this.calculatedState, calculatedState)) {\n          this.cacheValues(this.getCalculatedValues(nextProps));\n          return true;\n        }\n        if (!isEqual(this.props, nextProps)) {\n          this.cacheValues(this.getCalculatedValues(nextProps));\n          return true;\n        }\n        return false;\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        var _this2 = this;\n        var globalEventKeys = _keys(this.globalEvents);\n        globalEventKeys.forEach(function (key) {\n          return _this2.addGlobalListener(key);\n        });\n        this.prevGlobalEventKeys = globalEventKeys;\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var _this3 = this;\n        var calculatedState = this.getStateChanges(prevProps);\n        this.calculatedState = calculatedState;\n        var globalEventKeys = _keys(this.globalEvents);\n        var removedGlobalEventKeys = _difference(this.prevGlobalEventKeys, globalEventKeys);\n        removedGlobalEventKeys.forEach(function (key) {\n          return _this3.removeGlobalListener(key);\n        });\n        var addedGlobalEventKeys = _difference(globalEventKeys, this.prevGlobalEventKeys);\n        addedGlobalEventKeys.forEach(function (key) {\n          return _this3.addGlobalListener(key);\n        });\n        this.prevGlobalEventKeys = globalEventKeys;\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        var _this4 = this;\n        this.prevGlobalEventKeys.forEach(function (key) {\n          return _this4.removeGlobalListener(key);\n        });\n      }\n    }, {\n      key: \"addGlobalListener\",\n      value: function addGlobalListener(key) {\n        var _this5 = this;\n        var boundListener = function boundListener(event) {\n          var listener = _this5.globalEvents[key];\n          return listener && listener(Events.emulateReactEvent(event));\n        };\n        this.boundGlobalEvents[key] = boundListener;\n        window.addEventListener(Events.getGlobalEventNameFromKey(key), boundListener);\n      }\n    }, {\n      key: \"removeGlobalListener\",\n      value: function removeGlobalListener(key) {\n        window.removeEventListener(Events.getGlobalEventNameFromKey(key), this.boundGlobalEvents[key]);\n      } // compile all state changes from own and parent state. Order doesn't matter, as any state\n      // state change should trigger a re-render\n    }, {\n      key: \"getStateChanges\",\n      value: function getStateChanges(props) {\n        var _this6 = this;\n        if (!this.hasEvents) {\n          return {};\n        }\n        var getState = function getState(key, type) {\n          var result = _defaults({}, _this6.getEventState(key, type), _this6.getSharedEventState(key, type));\n          return _isEmpty(result) ? undefined : result;\n        };\n        var components = options.components || defaultComponents;\n        var stateChanges = components.map(function (component) {\n          if (!props.standalone && component.name === \"parent\") {\n            // don't check for changes on parent props for non-standalone components\n            return undefined;\n          }\n          return component.index !== undefined ? getState(component.index, component.name) : _this6.dataKeys.map(function (key) {\n            return getState(key, component.name);\n          }).filter(Boolean);\n        }).filter(Boolean);\n        return stateChanges;\n      }\n    }, {\n      key: \"applyExternalMutations\",\n      value: function applyExternalMutations(props, externalMutations) {\n        if (!_isEmpty(externalMutations)) {\n          var callbacks = props.externalEventMutations.reduce(function (memo, mutation) {\n            memo = _isFunction(mutation.callback) ? memo.concat(mutation.callback) : memo;\n            return memo;\n          }, []);\n          var compiledCallbacks = callbacks.length ? function () {\n            callbacks.forEach(function (c) {\n              return c();\n            });\n          } : undefined;\n          this.setState(externalMutations, compiledCallbacks);\n        }\n      }\n    }, {\n      key: \"getCalculatedValues\",\n      value: function getCalculatedValues(props) {\n        var sharedEvents = props.sharedEvents;\n        var components = WrappedComponent.expectedComponents;\n        var componentEvents = Events.getComponentEvents(props, components);\n        var getSharedEventState = sharedEvents && _isFunction(sharedEvents.getEventState) ? sharedEvents.getEventState : function () {\n          return undefined;\n        };\n        var baseProps = this.getBaseProps(props, getSharedEventState);\n        var dataKeys = _keys(baseProps).filter(function (key) {\n          return key !== \"parent\";\n        });\n        var hasEvents = props.events || props.sharedEvents || componentEvents;\n        var events = this.getAllEvents(props);\n        return {\n          componentEvents: componentEvents,\n          getSharedEventState: getSharedEventState,\n          baseProps: baseProps,\n          dataKeys: dataKeys,\n          hasEvents: hasEvents,\n          events: events\n        };\n      }\n    }, {\n      key: \"getExternalMutations\",\n      value: function getExternalMutations(props) {\n        var sharedEvents = props.sharedEvents,\n          externalEventMutations = props.externalEventMutations;\n        return _isEmpty(externalEventMutations) || sharedEvents ? undefined : Events.getExternalMutations(externalEventMutations, this.baseProps, this.state);\n      }\n    }, {\n      key: \"cacheValues\",\n      value: function cacheValues(obj) {\n        var _this7 = this;\n        _keys(obj).forEach(function (key) {\n          _this7[key] = obj[key];\n        });\n      }\n    }, {\n      key: \"getBaseProps\",\n      value: function getBaseProps(props, getSharedEventState) {\n        getSharedEventState = getSharedEventState || this.getSharedEventState.bind(this);\n        var sharedParentState = getSharedEventState(\"parent\", \"parent\");\n        var parentState = this.getEventState(\"parent\", \"parent\");\n        var baseParentProps = _defaults({}, parentState, sharedParentState);\n        var parentPropsList = baseParentProps.parentControlledProps;\n        var parentProps = parentPropsList ? _pick(baseParentProps, parentPropsList) : {};\n        var modifiedProps = _defaults({}, parentProps, props);\n        return typeof WrappedComponent.getBaseProps === \"function\" ? WrappedComponent.getBaseProps(modifiedProps) : {};\n      }\n    }, {\n      key: \"getAllEvents\",\n      value: function getAllEvents(props) {\n        if (Array.isArray(this.componentEvents)) {\n          var _this$componentEvents;\n          return Array.isArray(props.events) ? (_this$componentEvents = this.componentEvents).concat.apply(_this$componentEvents, _toConsumableArray(props.events)) : this.componentEvents;\n        }\n        return props.events;\n      }\n    }, {\n      key: \"getComponentProps\",\n      value: function getComponentProps(component, type, index) {\n        var name = this.props.name || WrappedComponent.role;\n        var key = this.dataKeys && this.dataKeys[index] || index;\n        var id = \"\".concat(name, \"-\").concat(type, \"-\").concat(key);\n        var baseProps = this.baseProps[key] && this.baseProps[key][type] || this.baseProps[key];\n        if (!baseProps && !this.hasEvents) {\n          return undefined;\n        }\n        if (this.hasEvents) {\n          var baseEvents = this.getEvents(this.props, type, key);\n          var componentProps = _defaults({\n            index: index,\n            key: id\n          }, this.getEventState(key, type), this.getSharedEventState(key, type), component.props, baseProps, {\n            id: id\n          });\n          var events = _defaults({}, Events.getPartialEvents(baseEvents, key, componentProps), componentProps.events);\n          return _assign({}, componentProps, {\n            events: events\n          });\n        }\n        return _defaults({\n          index: index,\n          key: id\n        }, component.props, baseProps, {\n          id: id\n        });\n      }\n    }, {\n      key: \"renderContainer\",\n      value: function renderContainer(component, children) {\n        var isContainer = component.type && component.type.role === \"container\";\n        var parentProps = isContainer ? this.getComponentProps(component, \"parent\", \"parent\") : {};\n        if (parentProps.events) {\n          this.globalEvents = Events.getGlobalEvents(parentProps.events);\n          parentProps.events = Events.omitGlobalEvents(parentProps.events);\n        }\n        return /*#__PURE__*/React.cloneElement(component, parentProps, children);\n      }\n    }, {\n      key: \"animateComponent\",\n      value: function animateComponent(props, defaultAnimationWhitelist) {\n        var _props$animate;\n        var animationWhitelist = typeof props.animate === \"object\" && ((_props$animate = props.animate) === null || _props$animate === void 0 ? void 0 : _props$animate.animationWhitelist) || defaultAnimationWhitelist;\n        var Comp = this.constructor;\n        return /*#__PURE__*/React.createElement(VictoryTransition, {\n          animate: props.animate,\n          animationWhitelist: animationWhitelist\n        }, /*#__PURE__*/React.createElement(Comp, props));\n      } // Used by `VictoryLine` and `VictoryArea`\n    }, {\n      key: \"renderContinuousData\",\n      value: function renderContinuousData(props) {\n        var _this8 = this;\n        var dataComponent = props.dataComponent,\n          labelComponent = props.labelComponent,\n          groupComponent = props.groupComponent;\n        var dataKeys = _without(this.dataKeys, \"all\");\n        var labelComponents = dataKeys.reduce(function (memo, key) {\n          var labelProps = _this8.getComponentProps(labelComponent, \"labels\", key);\n          if (labelProps && labelProps.text !== undefined && labelProps.text !== null) {\n            memo = memo.concat( /*#__PURE__*/React.cloneElement(labelComponent, labelProps));\n          }\n          return memo;\n        }, []);\n        var dataProps = this.getComponentProps(dataComponent, \"data\", \"all\");\n        var children = [/*#__PURE__*/React.cloneElement(dataComponent, dataProps)].concat(_toConsumableArray(labelComponents));\n        return this.renderContainer(groupComponent, children);\n      }\n    }, {\n      key: \"renderData\",\n      value: function renderData(props) {\n        var _this9 = this;\n        var shouldRenderDatum = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : datumHasXandY;\n        var dataComponent = props.dataComponent,\n          labelComponent = props.labelComponent,\n          groupComponent = props.groupComponent;\n        var dataComponents = this.dataKeys.reduce(function (validDataComponents, _dataKey, index) {\n          var dataProps = _this9.getComponentProps(dataComponent, \"data\", index);\n          if (shouldRenderDatum(dataProps.datum)) {\n            validDataComponents.push( /*#__PURE__*/React.cloneElement(dataComponent, dataProps));\n          }\n          return validDataComponents;\n        }, []);\n        var labelComponents = this.dataKeys.map(function (_dataKey, index) {\n          var labelProps = _this9.getComponentProps(labelComponent, \"labels\", index);\n          if (labelProps.text !== undefined && labelProps.text !== null) {\n            return /*#__PURE__*/React.cloneElement(labelComponent, labelProps);\n          }\n          return undefined;\n        }).filter(Boolean);\n        var children = [].concat(_toConsumableArray(dataComponents), _toConsumableArray(labelComponents));\n        return this.renderContainer(groupComponent, children);\n      }\n    }]);\n    return AddEventsMixin;\n  }(WrappedComponent);\n  return AddEventsMixin;\n}","map":null,"metadata":{},"sourceType":"module"}