{"ast":null,"code":"import _slicedToArray from \"/Users/anjaliagrawal/Desktop/ons/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/ons/src/components/Quiz.js\";\n/*import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\n\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\" >\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz}/>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n};\n\nexport default Quiz;*/\n/*import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\nimport './Score.css';\nimport '../App.css';\n\nimport Score from './Score';\nimport { quizData } from './quizData';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  const isLastQuestion = currentQuestion === questions.length - 1;\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz} />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\" key={optionChunk.join()}>\n                {optionChunk.map((option) => {\n                  const isCorrect = option === questions[currentQuestion].answer;\n                  const disabled = isLastQuestion && !showScore;\n                  const link = disabled ? null : (\n                    <Link to={isLastQuestion ? '/score' : '#'}>{option}</Link>\n                  );\n\n                  return (\n                    <button\n                      key={option}\n                      disabled={disabled}\n                      onClick={() => handleAnswerOptionClick(isCorrect)}\n                    >\n                      {link}\n                    </button>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n          {isLastQuestion && !showScore && (\n            <button className=\"view-score-btn\" onClick={() => setShowScore(true)}>\n              View Score\n            </button>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;*/\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\nimport { quizData } from './quizData';\nvar Quiz = function Quiz() {\n  var _useState = useState(_.shuffle(quizData)),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect) {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n    var nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n  var answerLink = function answerLink(option) {\n    var isCorrect = option === questions[currentQuestion].answer;\n    var disabled = isLastQuestion && !showScore;\n    var link = disabled ? '/score' : '#';\n    return /*#__PURE__*/React.createElement(Link, {\n      to: link,\n      onClick: function onClick() {\n        return handleAnswerOptionClick(isCorrect);\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }\n    }, option);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 3\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    restartQuiz: restartQuiz,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195,\n      columnNumber: 7\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 11\n    }\n  }, questions[currentQuestion].question)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 9\n    }\n  }, questions[currentQuestion].options.map(function (option) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      key: option,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }\n    }, answerLink(option));\n  })), isLastQuestion && !showScore && /*#__PURE__*/React.createElement(Link, {\n    to: \"/score\",\n    className: \"view-score-btn\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 11\n    }\n  }, \"View Score\")));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","_","Link","quizData","Quiz","_useState","shuffle","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","handleAnswerOptionClick","isCorrect","nextQuestion","length","answerLink","option","answer","disabled","isLastQuestion","link","createElement","to","onClick","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","className","Score","totalQuestions","restartQuiz","Fragment","question","options","map","key"],"sources":["/Users/anjaliagrawal/Desktop/ons/src/components/Quiz.js"],"sourcesContent":["\n\n/*import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\n\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\" >\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz}/>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n\n};\n\nexport default Quiz;*/\n/*import React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\nimport './Score.css';\nimport '../App.css';\n\nimport Score from './Score';\nimport { quizData } from './quizData';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  const isLastQuestion = currentQuestion === questions.length - 1;\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz} />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\" key={optionChunk.join()}>\n                {optionChunk.map((option) => {\n                  const isCorrect = option === questions[currentQuestion].answer;\n                  const disabled = isLastQuestion && !showScore;\n                  const link = disabled ? null : (\n                    <Link to={isLastQuestion ? '/score' : '#'}>{option}</Link>\n                  );\n\n                  return (\n                    <button\n                      key={option}\n                      disabled={disabled}\n                      onClick={() => handleAnswerOptionClick(isCorrect)}\n                    >\n                      {link}\n                    </button>\n                  );\n                })}\n              </div>\n            ))}\n          </div>\n          {isLastQuestion && !showScore && (\n            <button className=\"view-score-btn\" onClick={() => setShowScore(true)}>\n              View Score\n            </button>\n          )}\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;*/\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\n\nimport { quizData } from './quizData';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  if (isCorrect) {\n    setScore(score + 1);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\nconst answerLink = (option) => {\n  const isCorrect = option === questions[currentQuestion].answer;\n  const disabled = isLastQuestion && !showScore;\n  const link = disabled ? '/score' : '#';\n  return (\n    <Link to={link} onClick={() => handleAnswerOptionClick(isCorrect)}>\n      {option}\n    </Link>\n  );\n};\n\nreturn (\n  <div className=\"quiz\">\n    {showScore ? (\n      <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz} />\n    ) : (\n      <>\n        <div className=\"question-section\">\n          <div className=\"question-count\">\n            <span>Question {currentQuestion + 1}</span>/{questions.length}\n          </div>\n          <div className=\"question-text\">{questions[currentQuestion].question}</div>\n        </div>\n        <div className=\"answer-section\">\n          {questions[currentQuestion].options.map((option) => (\n            <div className=\"answer-row\" key={option}>\n              {answerLink(option)}\n            </div>\n          ))}\n        </div>\n        {isLastQuestion && !showScore && (\n          <Link to=\"/score\" className=\"view-score-btn\">\n            View Score\n          </Link>\n        )}\n      </>\n    )}\n  </div>\n);\n\n};\n\nexport default Quiz;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"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"},"metadata":{},"sourceType":"module"}