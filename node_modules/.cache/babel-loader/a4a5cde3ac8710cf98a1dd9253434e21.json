{"ast":null,"code":"import _slicedToArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js\";\n/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\nvar Quiz = function Quiz() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isLoading = _useState10[0],\n    setIsLoading = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasPostedResults = _useState12[0],\n    setHasPostedResults = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    numCorrectAnswers = _useState14[0],\n    setNumCorrectAnswers = _useState14[1];\n  var _useState15 = useState(null),\n    _useState16 = _slicedToArray(_useState15, 2),\n    previousDifficulty = _useState16[0],\n    setPreviousDifficulty = _useState16[1];\n  useEffect(function () {\n    // Make an HTTP GET request to your backend API endpoint\n    axios.get('http://localhost:8000/api/questions').then(function (response) {\n      // Randomly select 10 questions from the data retrieved from the API\n      var selectedQuestions = _.sampleSize(response.data, 10);\n      // Set the questions state variable to the selected questions\n      setQuestions(_.shuffle(selectedQuestions));\n      setIsLoading(false);\n    }).catch(function (error) {\n      console.log(error);\n      setIsLoading(false);\n    });\n  }, []);\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect, difficulty) {\n    var questionDifficulty = 'easy';\n    if (numCorrectAnswers === 0 || numCorrectAnswers === 1) {\n      questionDifficulty = 'easy';\n    } else if (numCorrectAnswers === 2 || numCorrectAnswers === 3 || numCorrectAnswers === 4) {\n      questionDifficulty = 'medium';\n    } else {\n      if (previousDifficulty === 'medium' && isCorrect) {\n        questionDifficulty = 'hard';\n      } else if (previousDifficulty === 'easy') {\n        questionDifficulty = 'medium';\n      } else {\n        questionDifficulty = 'hard';\n      }\n    }\n    var questionScore = 0;\n    if (isCorrect) {\n      if (questionDifficulty === 'easy') {\n        questionScore = 1;\n      } else if (questionDifficulty === 'medium') {\n        questionScore = 2;\n      } else if (questionDifficulty === 'hard') {\n        questionScore = 3;\n      }\n      setScore(score + questionScore);\n      setNumCorrectAnswers(numCorrectAnswers + 1);\n    } else {\n      setNumCorrectAnswers(0);\n    }\n    var nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setPreviousDifficulty(questionDifficulty);\n    } else {\n      setShowScore(true);\n    }\n  };\n  useEffect(function () {\n    console.log('Current Score:', score);\n  }, [score]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }\n  }, \"Loading\") : showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    hasPostedResults: hasPostedResults,\n    setHasPostedResults: setHasPostedResults,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-level\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 13\n    }\n  }, \"Difficulty level: \", questions[currentQuestion].difficulty)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer, questions[currentQuestion].difficulty);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 209,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  }))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","useEffect","_","Link","Score","axios","Quiz","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","hasPostedResults","setHasPostedResults","_useState13","_useState14","numCorrectAnswers","setNumCorrectAnswers","_useState15","_useState16","previousDifficulty","setPreviousDifficulty","get","then","response","selectedQuestions","sampleSize","data","shuffle","catch","error","console","log","handleAnswerOptionClick","isCorrect","difficulty","questionDifficulty","questionScore","nextQuestion","length","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","Fragment","question","chunk","options","map","optionChunk","option","onClick","answer"],"sources":["/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [numCorrectAnswers, setNumCorrectAnswers] = useState(0);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect, difficulty) => {\n    let questionDifficulty = 'easy';\n    if (numCorrectAnswers === 0 || numCorrectAnswers === 1) {\n      questionDifficulty = 'easy';\n    } else if (numCorrectAnswers === 2 || numCorrectAnswers === 3 || numCorrectAnswers === 4) {\n      questionDifficulty = 'medium';\n    } else {\n      if (previousDifficulty === 'medium' && isCorrect) {\n        questionDifficulty = 'hard';\n      } else if (previousDifficulty === 'easy') {\n        questionDifficulty = 'medium';\n      } else {\n        questionDifficulty = 'hard';\n      }\n    }\n\n    let questionScore = 0;\n    if (isCorrect) {\n      if (questionDifficulty === 'easy') {\n        questionScore = 1;\n      } else if (questionDifficulty === 'medium') {\n        questionScore = 2;\n      } else if (questionDifficulty === 'hard') {\n        questionScore = 3;\n      }\n      setScore(score + questionScore);\n      setNumCorrectAnswers(numCorrectAnswers + 1);\n    } else {\n      setNumCorrectAnswers(0);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n      setPreviousDifficulty(questionDifficulty);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  useEffect(() => {\n    console.log('Current Score:', score);\n  }, [score]);\n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">\n              Difficulty level: {questions[currentQuestion].difficulty}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(\n                        option === questions[currentQuestion].answer,\n                        questions[currentQuestion].difficulty\n                      )\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n\n\n\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}