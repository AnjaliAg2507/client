{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _assign from \"lodash/assign\";\nimport _defaults from \"lodash/defaults\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { Background, CommonProps, Helpers, Hooks, PropTypes as CustomPropTypes, UserProps, VictoryContainer, VictoryTheme, Wrapper } from \"victory-core\";\nimport { VictorySharedEvents } from \"victory-shared-events\";\nimport { VictoryAxis } from \"victory-axis\";\nimport { VictoryPolarAxis } from \"victory-polar-axis\";\nimport { getBackgroundWithProps, getChildComponents, getCalculatedProps, getChildren } from \"./helper-methods\";\nimport isEqual from \"react-fast-compare\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50\n};\nvar VictoryChartImpl = function VictoryChartImpl(initialProps) {\n  var role = \"chart\";\n  var _Hooks$useAnimationSt = Hooks.useAnimationState(),\n    getAnimationProps = _Hooks$useAnimationSt.getAnimationProps,\n    setAnimationState = _Hooks$useAnimationSt.setAnimationState,\n    getProps = _Hooks$useAnimationSt.getProps;\n  var props = getProps(initialProps);\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, role);\n  var desc = modifiedProps.desc,\n    eventKey = modifiedProps.eventKey,\n    containerComponent = modifiedProps.containerComponent,\n    standalone = modifiedProps.standalone,\n    groupComponent = modifiedProps.groupComponent,\n    externalEventMutations = modifiedProps.externalEventMutations,\n    width = modifiedProps.width,\n    height = modifiedProps.height,\n    theme = modifiedProps.theme,\n    polar = modifiedProps.polar,\n    name = modifiedProps.name,\n    title = modifiedProps.title;\n  var axes = props.polar ? modifiedProps.defaultPolarAxes : modifiedProps.defaultAxes;\n  var childComponents = React.useMemo(function () {\n    return getChildComponents(modifiedProps, axes);\n  }, [modifiedProps, axes]);\n  var calculatedProps = React.useMemo(function () {\n    return getCalculatedProps(modifiedProps, childComponents);\n  }, [modifiedProps, childComponents]);\n  var domain = calculatedProps.domain,\n    scale = calculatedProps.scale,\n    style = calculatedProps.style,\n    origin = calculatedProps.origin,\n    horizontal = calculatedProps.horizontal;\n  var newChildren = React.useMemo(function () {\n    var children = getChildren(props, childComponents, calculatedProps);\n    var mappedChildren = children.map(function (child, index) {\n      var childProps = _assign({\n        animate: getAnimationProps(props, child, index)\n      }, child.props);\n      return /*#__PURE__*/React.cloneElement(child, childProps);\n    });\n    if (props.style && props.style.background) {\n      var backgroundComponent = getBackgroundWithProps(props, calculatedProps);\n      mappedChildren.unshift(backgroundComponent);\n    }\n    return mappedChildren;\n  }, [getAnimationProps, childComponents, props, calculatedProps]);\n  var containerProps = React.useMemo(function () {\n    if (standalone) {\n      return {\n        desc: desc,\n        domain: domain,\n        width: width,\n        height: height,\n        horizontal: horizontal,\n        name: name,\n        origin: polar ? origin : undefined,\n        polar: polar,\n        theme: theme,\n        title: title,\n        scale: scale,\n        standalone: standalone,\n        style: style.parent\n      };\n    }\n    return {};\n  }, [desc, domain, height, horizontal, name, origin, polar, scale, standalone, style, title, theme, width]);\n  var container = React.useMemo(function () {\n    if (standalone) {\n      var defaultContainerProps = _defaults({}, containerComponent.props, containerProps, UserProps.getSafeUserProps(initialProps));\n      return /*#__PURE__*/React.cloneElement(containerComponent, defaultContainerProps);\n    }\n    return groupComponent;\n  }, [groupComponent, standalone, containerComponent, containerProps, initialProps]);\n  var events = React.useMemo(function () {\n    return Wrapper.getAllEvents(props);\n  }, [props]);\n  var previousProps = Hooks.usePreviousProps(initialProps);\n  React.useEffect(function () {\n    // This is called before dismount to keep state in sync\n    return function () {\n      if (initialProps.animate) {\n        setAnimationState(previousProps, initialProps);\n      }\n    };\n  }, [setAnimationState, previousProps, initialProps]);\n  if (!_isEmpty(events)) {\n    return /*#__PURE__*/React.createElement(VictorySharedEvents, {\n      container: container,\n      eventKey: eventKey,\n      events: events,\n      externalEventMutations: externalEventMutations\n    }, newChildren);\n  }\n  return /*#__PURE__*/React.cloneElement(container, container.props, newChildren);\n};\nVictoryChartImpl.propTypes = _objectSpread(_objectSpread({}, CommonProps.baseProps), {}, {\n  backgroundComponent: PropTypes.element,\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  defaultAxes: PropTypes.shape({\n    independent: PropTypes.element,\n    dependent: PropTypes.element\n  }),\n  defaultPolarAxes: PropTypes.shape({\n    independent: PropTypes.element,\n    dependent: PropTypes.element\n  }),\n  endAngle: PropTypes.number,\n  innerRadius: CustomPropTypes.nonNegative,\n  prependDefaultAxes: PropTypes.bool,\n  startAngle: PropTypes.number\n});\nVictoryChartImpl.defaultProps = {\n  backgroundComponent: /*#__PURE__*/React.createElement(Background, null),\n  containerComponent: /*#__PURE__*/React.createElement(VictoryContainer, null),\n  defaultAxes: {\n    independent: /*#__PURE__*/React.createElement(VictoryAxis, null),\n    dependent: /*#__PURE__*/React.createElement(VictoryAxis, {\n      dependentAxis: true\n    })\n  },\n  defaultPolarAxes: {\n    independent: /*#__PURE__*/React.createElement(VictoryPolarAxis, null),\n    dependent: /*#__PURE__*/React.createElement(VictoryPolarAxis, {\n      dependentAxis: true\n    })\n  },\n  groupComponent: /*#__PURE__*/React.createElement(\"g\", null),\n  standalone: true,\n  theme: VictoryTheme.grayscale\n};\nexport var VictoryChart = /*#__PURE__*/React.memo(VictoryChartImpl, isEqual);\nVictoryChart.displayName = \"VictoryChart\"; // @ts-expect-error FIXME: Does this \"expectedComponents\" do anything?\n\nVictoryChart.expectedComponents = [\"groupComponent\", \"containerComponent\"];","map":null,"metadata":{},"sourceType":"module"}