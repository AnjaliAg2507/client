{"ast":null,"code":"import * as Collection from \"./collection\";\n\n// Private Functions\nfunction transformTarget(target, matrix, dimension) {\n  var a = matrix.a,\n    d = matrix.d,\n    e = matrix.e,\n    f = matrix.f;\n  return dimension === \"y\" ? d * target + f : a * target + e;\n}\nfunction getTransformationMatrix(svg) {\n  return svg.getScreenCTM().inverse();\n}\nfunction isNativeTouchEvent(nativeEvent) {\n  return !!(nativeEvent && nativeEvent.identifier !== undefined);\n}\nfunction isReactTouchEvent(evt) {\n  return evt.changedTouches && evt.changedTouches.length > 0;\n} // Exported Functions\n\nexport function getParentSVG(evt) {\n  if (isNativeTouchEvent(evt.nativeEvent)) {\n    // @ts-expect-error Seems like a superfluous check.\n    return undefined;\n  }\n  var getParent = function getParent(target) {\n    if (target.nodeName === \"svg\") {\n      return target;\n    }\n    return target.parentNode ? getParent(target.parentNode) : target;\n  };\n  return getParent(evt.target);\n}\nexport function getSVGEventCoordinates(evt, svg) {\n  if (isNativeTouchEvent(evt.nativeEvent)) {\n    // react-native override. relies on the RN.View being the _exact_ same size as its child SVG.\n    // this should be fine: the svg is the only child of View and the View shirks to its children\n    return {\n      x: evt.nativeEvent.locationX,\n      y: evt.nativeEvent.locationY\n    };\n  }\n  var location = isReactTouchEvent(evt) ? evt.changedTouches[0] : evt;\n  svg = svg || getParentSVG(location);\n  var matrix = getTransformationMatrix(svg);\n  return {\n    x: transformTarget(location.clientX, matrix, \"x\"),\n    y: transformTarget(location.clientY, matrix, \"y\")\n  };\n}\nexport function getDomainCoordinates(props, domain) {\n  var horizontal = props.horizontal;\n  var scale = props.scale; // FIXME: add support for DomainTuple: [number, number]\n\n  var domainObj = domain || {\n    x: scale.x.domain(),\n    y: scale.y.domain()\n  };\n  return {\n    x: horizontal ? [scale.y(domainObj.y[0]), scale.y(domainObj.y[1])] : [scale.x(domainObj.x[0]), scale.x(domainObj.x[1])],\n    y: horizontal ? [scale.x(domainObj.x[0]), scale.x(domainObj.x[1])] : [scale.y(domainObj.y[0]), scale.y(domainObj.y[1])]\n  };\n} // eslint-disable-next-line max-params\n\nexport function getDataCoordinates(props, scale, x, y) {\n  var polar = props.polar,\n    horizontal = props.horizontal;\n  if (!polar) {\n    return {\n      x: horizontal ? scale.x.invert(y) : scale.x.invert(x),\n      y: horizontal ? scale.y.invert(x) : scale.y.invert(y)\n    };\n  }\n  var origin = props.origin || {\n    x: 0,\n    y: 0\n  };\n  var baseX = x - origin.x;\n  var baseY = y - origin.y;\n  var radius = Math.abs(baseX * Math.sqrt(1 + Math.pow(-baseY / baseX, 2)));\n  var angle = (-Math.atan2(baseY, baseX) + Math.PI * 2) % (Math.PI * 2);\n  return {\n    x: scale.x.invert(angle),\n    y: scale.y.invert(radius)\n  };\n}\nexport function getBounds(props) {\n  var x1 = props.x1,\n    x2 = props.x2,\n    y1 = props.y1,\n    y2 = props.y2,\n    scale = props.scale;\n  var point1 = getDataCoordinates(props, scale, x1, y1);\n  var point2 = getDataCoordinates(props, scale, x2, y2);\n  var makeBound = function makeBound(a, b) {\n    return [Collection.getMinValue([a, b]), Collection.getMaxValue([a, b])];\n  };\n  return {\n    x: makeBound(point1.x, point2.x),\n    y: makeBound(point1.y, point2.y)\n  };\n}","map":null,"metadata":{},"sourceType":"module"}