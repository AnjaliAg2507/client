{"ast":null,"code":"import _slicedToArray from \"/Users/anjaliagrawal/Desktop/ons/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/ons/src/components/Quiz.js\";\n/*\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\n\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n \n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz}/>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;*/\n\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\nimport Score from './Score';\nimport { quizData } from './quizData';\nvar Quiz = function Quiz() {\n  var _useState = useState(_.shuffle(quizData)),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(null),\n    _useState10 = _slicedToArray(_useState9, 2),\n    selectedAnswer = _useState10[0],\n    setSelectedAnswer = _useState10[1];\n  var _useState11 = useState(_.shuffle(questions.map(function (q) {\n      return q.options;\n    }))),\n    _useState12 = _slicedToArray(_useState11, 2),\n    shuffledOptions = _useState12[0],\n    setShuffledOptions = _useState12[1];\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect) {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n  };\n  var handleNextQuestion = function handleNextQuestion() {\n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswer(null);\n  };\n  var handlePreviousQuestion = function handlePreviousQuestion() {\n    setCurrentQuestion(currentQuestion - 1);\n    setSelectedAnswer(null);\n  };\n  var handleFinish = function handleFinish() {\n    setShowScore(true);\n  };\n  var restartQuiz = function restartQuiz() {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setSelectedAnswer(null);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    restartQuiz: restartQuiz,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        className: selectedAnswer === option ? 'selected' : '',\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer, option);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"navigation-buttons\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 11\n    }\n  }, currentQuestion !== 0 && /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handlePreviousQuestion,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 15\n    }\n  }, \"Previous\"), currentQuestion !== questions.length - 1 ? /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleNextQuestion,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 15\n    }\n  }, \"Next\") : /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleFinish,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 15\n    }\n  }, \"Finish\"))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","_","Link","Score","quizData","Quiz","_useState","shuffle","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","_useState9","_useState10","selectedAnswer","setSelectedAnswer","_useState11","map","q","options","_useState12","shuffledOptions","setShuffledOptions","handleAnswerOptionClick","isCorrect","handleNextQuestion","handlePreviousQuestion","handleFinish","restartQuiz","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","length","Fragment","question","chunk","optionChunk","option","onClick","answer"],"sources":["/Users/anjaliagrawal/Desktop/ons/src/components/Quiz.js"],"sourcesContent":["/*\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\n\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n \n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz}/>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;*/\n\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [shuffledOptions, setShuffledOptions] = useState(_.shuffle(questions.map(q => q.options)));\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  if (isCorrect) {\n    setScore(score + 1);\n  }\n};\n\n\n  const handleNextQuestion = () => {\n    setCurrentQuestion(currentQuestion + 1);\n    setSelectedAnswer(null);\n  };\n\n  const handlePreviousQuestion = () => {\n    setCurrentQuestion(currentQuestion - 1);\n    setSelectedAnswer(null);\n  };\n\n  const handleFinish = () => {\n    setShowScore(true);\n  };\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n    setSelectedAnswer(null);\n  };\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz} />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    className={selectedAnswer === option ? 'selected' : ''}\n                    onClick={() =>\n                      handleAnswerOptionClick(\n                        option === questions[currentQuestion].answer,\n                        option\n                      )\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div className=\"navigation-buttons\">\n            {currentQuestion !== 0 && (\n              <button onClick={handlePreviousQuestion}>Previous</button>\n            )}\n            {currentQuestion !== questions.length - 1 ? (\n              <button onClick={handleNextQuestion}>Next</button>\n            ) : (\n              <button onClick={handleFinish}>Finish</button>\n            )}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,YAAY;AAEnB,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAAQC,QAAQ,QAAO,YAAY;AAEnC,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;EAAA,IAAAC,SAAA,GACiBN,QAAQ,CAACC,CAAC,CAACM,OAAO,CAACH,QAAQ,CAAC,CAAC;IAAAI,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAxDI,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACgBZ,QAAQ,CAAC,CAAC,CAAC;IAAAa,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAlDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAAA,IAAAG,UAAA,GACRhB,QAAQ,CAAC,KAAK,CAAC;IAAAiB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA1CE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAAA,IAAAG,UAAA,GACJpB,QAAQ,CAAC,CAAC,CAAC;IAAAqB,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAA9BE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAAA,IAAAG,UAAA,GACsBxB,QAAQ,CAAC,IAAI,CAAC;IAAAyB,WAAA,GAAAhB,cAAA,CAAAe,UAAA;IAAnDE,cAAc,GAAAD,WAAA;IAAEE,iBAAiB,GAAAF,WAAA;EAAA,IAAAG,WAAA,GACM5B,QAAQ,CAACC,CAAC,CAACM,OAAO,CAACG,SAAS,CAACmB,GAAG,CAAC,UAAAC,CAAC;MAAA,OAAIA,CAAC,CAACC,OAAO;IAAA,EAAC,CAAC,CAAC;IAAAC,WAAA,GAAAvB,cAAA,CAAAmB,WAAA;IAAzFK,eAAe,GAAAD,WAAA;IAAEE,kBAAkB,GAAAF,WAAA;EAE1C,IAAMG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIC,SAAS,EAAK;IAC/C,IAAIA,SAAS,EAAE;MACbb,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;IACrB;EACF,CAAC;EAGC,IAAMe,kBAAkB,GAAG,SAArBA,kBAAkBA,CAAA,EAAS;IAC/BtB,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;IACvCa,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,IAAMW,sBAAsB,GAAG,SAAzBA,sBAAsBA,CAAA,EAAS;IACnCvB,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;IACvCa,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,IAAMY,YAAY,GAAG,SAAfA,YAAYA,CAAA,EAAS;IACzBpB,YAAY,CAAC,IAAI,CAAC;EACpB,CAAC;EAED,IAAMqB,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxB7B,YAAY,CAACV,CAAC,CAACM,OAAO,CAACH,QAAQ,CAAC,CAAC;IACjCW,kBAAkB,CAAC,CAAC,CAAC;IACrBI,YAAY,CAAC,KAAK,CAAC;IACnBI,QAAQ,CAAC,CAAC,CAAC;IACXI,iBAAiB,CAAC,IAAI,CAAC;EACzB,CAAC;EAED,oBACE5B,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClB/B,SAAS,gBACRnB,KAAA,CAAA0C,aAAA,CAACtC,KAAK;IAACmB,KAAK,EAAEA,KAAM;IAAC4B,cAAc,EAAExC,SAAS,CAACyC,MAAO;IAACX,WAAW,EAAEA,WAAY;IAAAG,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,gBAEnFlD,KAAA,CAAA0C,aAAA,CAAA1C,KAAA,CAAAqD,QAAA,qBACErD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,kBAAkB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/BlD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7BlD,KAAA,CAAA0C,aAAA;IAAAE,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,WAAS,EAACnC,eAAe,GAAG,CAAC,CAAQ,KAAC,EAACJ,SAAS,CAACyC,MAAM,CACzD,eACNpD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEvC,SAAS,CAACI,eAAe,CAAC,CAACuC,QAAQ,CAAO,CACtE,eACNtD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5BhD,CAAC,CAACqD,KAAK,CAACrD,CAAC,CAACM,OAAO,CAACG,SAAS,CAACI,eAAe,CAAC,CAACiB,OAAO,CAAC,EAAE,CAAC,CAAC,CAACF,GAAG,CAAC,UAAC0B,WAAW;IAAA,oBACzExD,KAAA,CAAA0C,aAAA;MAAKC,SAAS,EAAC,YAAY;MAAAC,MAAA,EAAAC,KAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACxBM,WAAW,CAAC1B,GAAG,CAAC,UAAC2B,MAAM;MAAA,oBACtBzD,KAAA,CAAA0C,aAAA;QACEC,SAAS,EAAEhB,cAAc,KAAK8B,MAAM,GAAG,UAAU,GAAG,EAAG;QACvDC,OAAO,EAAE,SAAAA,QAAA;UAAA,OACPtB,uBAAuB,CACrBqB,MAAM,KAAK9C,SAAS,CAACI,eAAe,CAAC,CAAC4C,MAAM,EAC5CF,MAAM,CACP;QAAA,CACF;QAAAb,MAAA,EAAAC,KAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAEAO,MAAM,CACA;IAAA,CACV,CAAC,CACE;EAAA,CACP,CAAC,CACE,eACNzD,KAAA,CAAA0C,aAAA;IAAKC,SAAS,EAAC,oBAAoB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAChCnC,eAAe,KAAK,CAAC,iBACpBf,KAAA,CAAA0C,aAAA;IAAQgB,OAAO,EAAEnB,sBAAuB;IAAAK,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAAQ,CAClD,EACAnC,eAAe,KAAKJ,SAAS,CAACyC,MAAM,GAAG,CAAC,gBACvCpD,KAAA,CAAA0C,aAAA;IAAQgB,OAAO,EAAEpB,kBAAmB;IAAAM,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,MAAI,CAAS,gBAElDlD,KAAA,CAAA0C,aAAA;IAAQgB,OAAO,EAAElB,YAAa;IAAAI,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,QAAM,CACtC,CACG,CAET,CACG;AAEV,CAAC;AAED,eAAe5C,IAAI"},"metadata":{},"sourceType":"module"}