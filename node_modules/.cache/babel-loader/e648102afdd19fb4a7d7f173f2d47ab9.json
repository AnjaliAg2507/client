{"ast":null,"code":"import _isEmpty from \"lodash/isEmpty\";\nimport _defaults from \"lodash/defaults\";\nimport _assign from \"lodash/assign\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { CommonProps, Helpers, Hooks, UserProps, VictoryContainer, VictoryTheme, Wrapper } from \"victory-core\";\nimport { VictorySharedEvents } from \"victory-shared-events\";\nimport { getChildren, useMemoizedProps } from \"./helper-methods\";\nimport isEqual from \"react-fast-compare\";\nvar fallbackProps = {\n  width: 450,\n  height: 300,\n  padding: 50,\n  offset: 0\n};\nvar VictoryGroupBase = function VictoryGroupBase(initialProps) {\n  // eslint-disable-next-line no-use-before-define\n  var role = VictoryGroup === null || VictoryGroup === void 0 ? void 0 : VictoryGroup.role;\n  var _Hooks$useAnimationSt = Hooks.useAnimationState(),\n    getAnimationProps = _Hooks$useAnimationSt.getAnimationProps,\n    setAnimationState = _Hooks$useAnimationSt.setAnimationState,\n    getProps = _Hooks$useAnimationSt.getProps;\n  var props = getProps(initialProps);\n  var modifiedProps = Helpers.modifyProps(props, fallbackProps, role);\n  var eventKey = modifiedProps.eventKey,\n    containerComponent = modifiedProps.containerComponent,\n    standalone = modifiedProps.standalone,\n    groupComponent = modifiedProps.groupComponent,\n    externalEventMutations = modifiedProps.externalEventMutations,\n    width = modifiedProps.width,\n    height = modifiedProps.height,\n    theme = modifiedProps.theme,\n    polar = modifiedProps.polar,\n    horizontal = modifiedProps.horizontal,\n    name = modifiedProps.name;\n  var childComponents = React.Children.toArray(modifiedProps.children);\n  var calculatedProps = useMemoizedProps(modifiedProps);\n  var domain = calculatedProps.domain,\n    scale = calculatedProps.scale,\n    style = calculatedProps.style,\n    origin = calculatedProps.origin;\n  var newChildren = React.useMemo(function () {\n    var children = getChildren(props, childComponents, calculatedProps);\n    return children.map(function (child, index) {\n      var childProps = _assign({\n        animate: getAnimationProps(props, child, index)\n      }, child.props);\n      return /*#__PURE__*/React.cloneElement(child, childProps);\n    });\n  }, [props, childComponents, calculatedProps, getAnimationProps]);\n  var containerProps = React.useMemo(function () {\n    if (standalone) {\n      return {\n        domain: domain,\n        scale: scale,\n        width: width,\n        height: height,\n        standalone: standalone,\n        theme: theme,\n        style: style.parent,\n        horizontal: horizontal,\n        polar: polar,\n        origin: origin,\n        name: name\n      };\n    }\n    return {};\n  }, [standalone, domain, scale, width, height, theme, style, horizontal, polar, origin, name]);\n  var userProps = React.useMemo(function () {\n    return UserProps.getSafeUserProps(initialProps);\n  }, [initialProps]);\n  var container = React.useMemo(function () {\n    if (standalone) {\n      var defaultContainerProps = _defaults({}, containerComponent.props, containerProps, userProps);\n      return /*#__PURE__*/React.cloneElement(containerComponent, defaultContainerProps);\n    }\n    return /*#__PURE__*/React.cloneElement(groupComponent, userProps);\n  }, [groupComponent, standalone, containerComponent, containerProps, userProps]);\n  var events = React.useMemo(function () {\n    return Wrapper.getAllEvents(props);\n  }, [props]);\n  var previousProps = Hooks.usePreviousProps(initialProps);\n  React.useEffect(function () {\n    // This is called before dismount to keep state in sync\n    return function () {\n      if (initialProps.animate) {\n        setAnimationState(previousProps, props);\n      }\n    };\n  }, [setAnimationState, previousProps, initialProps, props]);\n  if (!_isEmpty(events)) {\n    return /*#__PURE__*/React.createElement(VictorySharedEvents, {\n      container: container,\n      eventKey: eventKey,\n      events: events,\n      externalEventMutations: externalEventMutations\n    }, newChildren);\n  }\n  return /*#__PURE__*/React.cloneElement(container, container.props, newChildren);\n};\nVictoryGroupBase.propTypes = _objectSpread(_objectSpread(_objectSpread({}, CommonProps.baseProps), CommonProps.dataProps), {}, {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  horizontal: PropTypes.bool,\n  offset: PropTypes.number\n});\nVictoryGroupBase.defaultProps = {\n  containerComponent: /*#__PURE__*/React.createElement(VictoryContainer, null),\n  groupComponent: /*#__PURE__*/React.createElement(\"g\", null),\n  samples: 50,\n  sortOrder: \"ascending\",\n  standalone: true,\n  theme: VictoryTheme.grayscale\n};\nvar componentConfig = {\n  role: \"group\",\n  expectedComponents: [\"groupComponent\", \"containerComponent\", \"labelComponent\"],\n  getChildren: getChildren\n};\nexport var VictoryGroup = Object.assign( /*#__PURE__*/React.memo(VictoryGroupBase, isEqual), componentConfig);\nVictoryGroup.displayName = \"VictoryGroup\";","map":null,"metadata":{},"sourceType":"module"}