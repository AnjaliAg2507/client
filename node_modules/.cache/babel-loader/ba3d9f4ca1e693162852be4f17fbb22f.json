{"ast":null,"code":"import _difference from \"lodash/difference\";\nimport _keys from \"lodash/keys\";\nimport _fromPairs from \"lodash/fromPairs\";\nimport _isEmpty from \"lodash/isEmpty\";\nimport _defaults from \"lodash/defaults\";\nimport _isFunction from \"lodash/isFunction\";\nimport _assign from \"lodash/assign\";\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _s, _e;\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n  return _arr;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { PropTypes as CustomPropTypes, Events, Helpers, TimerContext } from \"victory-core\";\nimport isEqual from \"react-fast-compare\";\nimport stringify from \"json-stringify-safe\"; // DISCLAIMER:\n// This file is not currently tested, and it is first on the list of files\n// to refactor in our current refactoring effort. Please do not make changes\n// to this file without manual testing and/or refactoring and adding tests.\n\nvar VictorySharedEvents = /*#__PURE__*/function (_React$Component) {\n  _inherits(VictorySharedEvents, _React$Component);\n  var _super = _createSuper(VictorySharedEvents);\n  function VictorySharedEvents(props) {\n    var _this;\n    _classCallCheck(this, VictorySharedEvents);\n    _this = _super.call(this, props);\n    _this.state = _this.state || {};\n    _this.getScopedEvents = Events.getScopedEvents.bind(_assertThisInitialized(_this));\n    _this.getEventState = Events.getEventState.bind(_assertThisInitialized(_this));\n    _this.baseProps = _this.getBaseProps(props);\n    _this.sharedEventsCache = {};\n    _this.globalEvents = {};\n    _this.prevGlobalEventKeys = [];\n    _this.boundGlobalEvents = {};\n    return _this;\n  }\n  _createClass(VictorySharedEvents, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps) {\n      if (!isEqual(this.props, nextProps)) {\n        this.baseProps = this.getBaseProps(nextProps);\n        var externalMutations = this.getExternalMutations(nextProps, this.baseProps);\n        this.applyExternalMutations(nextProps, externalMutations);\n      }\n      return true;\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n      var globalEventKeys = _keys(this.globalEvents);\n      globalEventKeys.forEach(function (key) {\n        return _this2.addGlobalListener(key);\n      });\n      this.prevGlobalEventKeys = globalEventKeys;\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      var _this3 = this;\n      var globalEventKeys = _keys(this.globalEvents);\n      var removedGlobalEventKeys = _difference(this.prevGlobalEventKeys, globalEventKeys);\n      removedGlobalEventKeys.forEach(function (key) {\n        return _this3.removeGlobalListener(key);\n      });\n      var addedGlobalEventKeys = _difference(globalEventKeys, this.prevGlobalEventKeys);\n      addedGlobalEventKeys.forEach(function (key) {\n        return _this3.addGlobalListener(key);\n      });\n      this.prevGlobalEventKeys = globalEventKeys;\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      var _this4 = this;\n      this.prevGlobalEventKeys.forEach(function (key) {\n        return _this4.removeGlobalListener(key);\n      });\n    }\n  }, {\n    key: \"addGlobalListener\",\n    value: function addGlobalListener(key) {\n      var _this5 = this;\n      var boundListener = function boundListener(event) {\n        var listener = _this5.globalEvents[key];\n        return listener && listener(Events.emulateReactEvent(event));\n      };\n      this.boundGlobalEvents[key] = boundListener;\n      window.addEventListener(Events.getGlobalEventNameFromKey(key), boundListener);\n    }\n  }, {\n    key: \"removeGlobalListener\",\n    value: function removeGlobalListener(key) {\n      window.removeEventListener(Events.getGlobalEventNameFromKey(key), this.boundGlobalEvents[key]);\n    }\n  }, {\n    key: \"getAllEvents\",\n    value: function getAllEvents(props) {\n      var components = [\"container\", \"groupComponent\"];\n      var componentEvents = Events.getComponentEvents(props, components);\n      if (Array.isArray(componentEvents)) {\n        return Array.isArray(props.events) ? componentEvents.concat.apply(componentEvents, _toConsumableArray(props.events)) : componentEvents;\n      }\n      return props.events;\n    }\n  }, {\n    key: \"applyExternalMutations\",\n    value: function applyExternalMutations(props, externalMutations) {\n      if (!_isEmpty(externalMutations)) {\n        var callbacks = props.externalEventMutations.reduce(function (memo, mutation) {\n          memo = _isFunction(mutation.callback) ? memo.concat(mutation.callback) : memo;\n          return memo;\n        }, []);\n        var compiledCallbacks = callbacks.length ? function () {\n          callbacks.forEach(function (c) {\n            return c();\n          });\n        } : undefined;\n        this.setState(externalMutations, compiledCallbacks);\n      }\n    }\n  }, {\n    key: \"getExternalMutations\",\n    value: function getExternalMutations(props, baseProps) {\n      return !_isEmpty(props.externalEventMutations) ? Events.getExternalMutationsWithChildren(props.externalEventMutations, baseProps, this.state, _keys(baseProps)) : undefined;\n    }\n  }, {\n    key: \"cacheSharedEvents\",\n    value: function cacheSharedEvents(name, sharedEvents, cacheValues) {\n      this.sharedEventsCache[name] = [sharedEvents, cacheValues];\n    }\n  }, {\n    key: \"getCachedSharedEvents\",\n    value: function getCachedSharedEvents(name, cacheValues) {\n      var _ref = this.sharedEventsCache[name] || [],\n        _ref2 = _slicedToArray(_ref, 2),\n        sharedEvents = _ref2[0],\n        prevCacheValues = _ref2[1];\n      if (sharedEvents && isEqual(cacheValues, prevCacheValues)) {\n        return sharedEvents;\n      }\n      return undefined;\n    }\n  }, {\n    key: \"getBaseProps\",\n    value: function getBaseProps(props) {\n      var container = props.container;\n      var children = React.Children.toArray(this.props.children);\n      var childBaseProps = this.getBasePropsFromChildren(children);\n      var parentBaseProps = container ? container.props : {};\n      return _assign({}, childBaseProps, {\n        parent: parentBaseProps\n      });\n    }\n  }, {\n    key: \"getBasePropsFromChildren\",\n    value: function getBasePropsFromChildren(childComponents) {\n      var iteratee = function iteratee(child, childName) {\n        if (child.type && _isFunction(child.type.getBaseProps)) {\n          var _baseProps = child.props && child.type.getBaseProps(child.props);\n          return _baseProps ? [[childName, _baseProps]] : null;\n        }\n        return null;\n      };\n      var baseProps = Helpers.reduceChildren(childComponents, iteratee);\n      return _fromPairs(baseProps);\n    }\n  }, {\n    key: \"getNewChildren\",\n    value: function getNewChildren(props, baseProps) {\n      var _this6 = this;\n      var events = props.events,\n        eventKey = props.eventKey;\n      var alterChildren = function alterChildren(children, childNames) {\n        return children.reduce(function (memo, child, index) {\n          if (child.props.children) {\n            var newChildren = React.Children.toArray(child.props.children);\n            var names = childNames.slice(index, index + newChildren.length);\n            var results = /*#__PURE__*/React.cloneElement(child, child.props, alterChildren(newChildren, names));\n            return memo.concat(results);\n          } else if (childNames[index] !== \"parent\" && child.type && _isFunction(child.type.getBaseProps)) {\n            var name = child.props.name || childNames[index];\n            var childEvents = Array.isArray(events) && events.filter(function (event) {\n              if (event.target === \"parent\") {\n                return false;\n              }\n              return Array.isArray(event.childName) ? event.childName.indexOf(name) > -1 : event.childName === name || event.childName === \"all\";\n            });\n            var sharedEventsCacheValues = [name, baseProps, childEvents, stringify(_this6.state[name])];\n            var sharedEvents = _this6.getCachedSharedEvents(name, sharedEventsCacheValues) || {\n              events: childEvents,\n              // partially apply child name and baseProps,\n              getEvents: function getEvents(evts, target) {\n                return _this6.getScopedEvents(evts, target, name, baseProps);\n              },\n              // partially apply child name\n              getEventState: function getEventState(key, target) {\n                return _this6.getEventState(key, target, name);\n              }\n            };\n            _this6.cacheSharedEvents(name, sharedEvents, sharedEventsCacheValues);\n            return memo.concat( /*#__PURE__*/React.cloneElement(child, _assign({\n              key: \"events-\".concat(name),\n              sharedEvents: sharedEvents,\n              eventKey: eventKey,\n              name: name\n            }, child.props)));\n          }\n          return memo.concat(child);\n        }, []);\n      };\n      var childNames = _keys(baseProps);\n      var childComponents = React.Children.toArray(props.children);\n      return alterChildren(childComponents, childNames);\n    }\n  }, {\n    key: \"getContainer\",\n    value: function getContainer(props, baseProps, events) {\n      var _this7 = this;\n      var children = this.getNewChildren(props, baseProps);\n      var parents = Array.isArray(events) && events.filter(function (event) {\n        return event.target === \"parent\";\n      });\n      var sharedEvents = parents.length > 0 ? {\n        events: parents,\n        // partially apply childName (null) and baseProps,\n        getEvents: function getEvents(evts, target) {\n          return _this7.getScopedEvents(evts, target, null, baseProps);\n        },\n        getEventState: this.getEventState\n      } : null;\n      var container = props.container || props.groupComponent;\n      var role = container.type && container.type.role;\n      var containerProps = container.props || {};\n      var boundGetEvents = Events.getEvents.bind(this);\n      var parentEvents = sharedEvents && boundGetEvents({\n        sharedEvents: sharedEvents\n      }, \"parent\");\n      var parentProps = _defaults({}, this.getEventState(\"parent\", \"parent\"), containerProps, baseProps.parent, {\n        children: children\n      });\n      var containerEvents = _defaults({}, Events.getPartialEvents(parentEvents, \"parent\", parentProps), containerProps.events);\n      this.globalEvents = Events.getGlobalEvents(containerEvents);\n      var localEvents = Events.omitGlobalEvents(containerEvents);\n      return role === \"container\" ? /*#__PURE__*/React.cloneElement(container, _assign({}, parentProps, {\n        events: localEvents\n      })) : /*#__PURE__*/React.cloneElement(container, localEvents, children);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var events = this.getAllEvents(this.props);\n      if (events) {\n        return this.getContainer(this.props, this.baseProps, events);\n      }\n      return /*#__PURE__*/React.cloneElement(this.props.container, {\n        children: this.props.children\n      });\n    }\n  }]);\n  return VictorySharedEvents;\n}(React.Component);\nVictorySharedEvents.displayName = \"VictorySharedEvents\";\nVictorySharedEvents.role = \"shared-event-wrapper\";\nVictorySharedEvents.propTypes = {\n  children: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.node), PropTypes.node]),\n  container: PropTypes.node,\n  eventKey: PropTypes.oneOfType([PropTypes.array, PropTypes.func, CustomPropTypes.allOfType([CustomPropTypes.integer, CustomPropTypes.nonNegative]), PropTypes.string]),\n  events: PropTypes.arrayOf(PropTypes.shape({\n    childName: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n    eventHandlers: PropTypes.object,\n    eventKey: PropTypes.oneOfType([PropTypes.array, PropTypes.func, CustomPropTypes.allOfType([CustomPropTypes.integer, CustomPropTypes.nonNegative]), PropTypes.string]),\n    target: PropTypes.string\n  })),\n  externalEventMutations: PropTypes.arrayOf(PropTypes.shape({\n    callback: PropTypes.func,\n    childName: PropTypes.oneOfType([PropTypes.string, PropTypes.array]),\n    eventKey: PropTypes.oneOfType([PropTypes.array, CustomPropTypes.allOfType([CustomPropTypes.integer, CustomPropTypes.nonNegative]), PropTypes.string]),\n    mutation: PropTypes.func,\n    target: PropTypes.oneOfType([PropTypes.string, PropTypes.array])\n  })),\n  groupComponent: PropTypes.node\n};\nVictorySharedEvents.defaultProps = {\n  groupComponent: /*#__PURE__*/React.createElement(\"g\", null)\n};\nVictorySharedEvents.contextType = TimerContext;\nexport { VictorySharedEvents as default };","map":null,"metadata":{},"sourceType":"module"}