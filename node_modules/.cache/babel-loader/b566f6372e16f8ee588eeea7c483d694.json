{"ast":null,"code":"import _assign from \"lodash/assign\";\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Helpers, CommonProps, PointPathHelpers } from \"victory-core\";\nimport { useCanvasContext } from \"./hooks/use-canvas-context\";\nvar getPath = function getPath(props) {\n  var x = props.x,\n    y = props.y,\n    size = props.size,\n    symbol = props.symbol;\n  if (props.getPath) {\n    return props.getPath(x, y, size);\n  }\n  var pathFunctions = {\n    circle: PointPathHelpers.circle,\n    square: PointPathHelpers.square,\n    diamond: PointPathHelpers.diamond,\n    triangleDown: PointPathHelpers.triangleDown,\n    triangleUp: PointPathHelpers.triangleUp,\n    plus: PointPathHelpers.plus,\n    minus: PointPathHelpers.minus,\n    star: PointPathHelpers.star,\n    cross: PointPathHelpers.cross\n  };\n  var symbolFunction = typeof pathFunctions[symbol] === \"function\" ? pathFunctions[symbol] : pathFunctions.circle;\n  return symbolFunction(x, y, size);\n};\nvar evaluateProps = function evaluateProps(props) {\n  /**\n   * Potential evaluated props are:\n   * `size`\n   * `style`\n   * `symbol`\n   */\n  var size = Helpers.evaluateProp(props.size, props);\n  var style = Helpers.evaluateStyle(props.style, props);\n  var symbol = Helpers.evaluateProp(props.symbol, props);\n  return _assign({}, props, {\n    size: size,\n    style: style,\n    symbol: symbol\n  });\n};\nvar CanvasPoint = function CanvasPoint(initialProps) {\n  var _useCanvasContext = useCanvasContext(),\n    canvasRef = _useCanvasContext.canvasRef;\n  var props = evaluateProps(initialProps);\n  var draw = React.useCallback(function (ctx) {\n    var style = props.style;\n    var path = getPath(props);\n    ctx.fillStyle = style.fill; // eslint-disable-next-line no-undef\n\n    var path2d = new Path2D(path);\n    ctx.fill(path2d);\n  }, [props]);\n  React.useEffect(function () {\n    var ctx = canvasRef.current.getContext(\"2d\");\n    draw(ctx); // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  return null;\n};\nCanvasPoint.propTypes = _objectSpread(_objectSpread({}, CommonProps.primitiveProps), {}, {\n  datum: PropTypes.object,\n  size: PropTypes.oneOfType([PropTypes.number, PropTypes.func]),\n  x: PropTypes.number,\n  y: PropTypes.number\n});\nexport default CanvasPoint;","map":null,"metadata":{},"sourceType":"module"}