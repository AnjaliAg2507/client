{"ast":null,"code":"import _slicedToArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js\";\n/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\nvar Quiz = function Quiz() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isLoading = _useState10[0],\n    setIsLoading = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasPostedResults = _useState12[0],\n    setHasPostedResults = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    answeredQuestions = _useState14[0],\n    setAnsweredQuestions = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    easyCorrectCount = _useState16[0],\n    setEasyCorrectCount = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    mediumCorrectCount = _useState18[0],\n    setMediumCorrectCount = _useState18[1];\n  var _useState19 = useState(0),\n    _useState20 = _slicedToArray(_useState19, 2),\n    hardCorrectCount = _useState20[0],\n    setHardCorrectCount = _useState20[1];\n  var _useState21 = useState('easy'),\n    _useState22 = _slicedToArray(_useState21, 2),\n    difficulty = _useState22[0],\n    setDifficulty = _useState22[1];\n  /*useEffect(() => {\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n        \n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);*/\n  useEffect(function () {\n    axios.get('http://localhost:8000/api/questions').then(function (response) {\n      // Filter the questions to only include those with difficulty set to \"easy\"\n      var easyQuestions = response.data.filter(function (q) {\n        return q.difficulty === 'easy';\n      });\n      // Select a random question from the filtered questions\n      var selectedQuestion = _.sample(easyQuestions);\n      // Set the questions state variable to the selected question\n      setQuestions([selectedQuestion]);\n      setIsLoading(false);\n    }).catch(function (error) {\n      console.log(error);\n      setIsLoading(false);\n    });\n  }, []);\n  useEffect(function () {\n    console.log('Current Score:', score);\n  }, [score]);\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect, difficulty) {\n    var questionScore = 0;\n    if (isCorrect) {\n      if (difficulty === 'easy') {\n        questionScore = 1;\n        setEasyCorrectCount(easyCorrectCount + 1);\n        setDifficulty('easy');\n      } else if (difficulty === 'medium') {\n        questionScore = 2;\n        setMediumCorrectCount(mediumCorrectCount + 1);\n        setDifficulty('medium');\n      } else if (difficulty === 'hard') {\n        questionScore = 3;\n        setHardCorrectCount(hardCorrectCount + 1);\n        setDifficulty('hard');\n      }\n      setScore(score + questionScore);\n    }\n    setAnsweredQuestions(answeredQuestions + 1);\n\n    // Filter the next questions based on the selected difficulty\n    var nextQuestions = questions.filter(function (q) {\n      return q.difficulty === difficulty;\n    });\n\n    // Get the index of the current question in the filtered next questions\n    var currentQuestionIndex = nextQuestions.findIndex(function (q) {\n      return q.id === questions[currentQuestion].id;\n    });\n\n    // Set the next question index based on the current question index and the length of the filtered next questions\n    var nextQuestionIndex = currentQuestionIndex < nextQuestions.length - 1 ? currentQuestionIndex + 1 : 0;\n\n    // Set the current question state to the index of the next question\n    setCurrentQuestion(questions.findIndex(function (q) {\n      return q.id === nextQuestions[nextQuestionIndex].id;\n    }));\n    if (answeredQuestions >= 9) {\n      setShowScore(true);\n    }\n  };\n\n  /*const handleAnswerOptionClick = (isCorrect, difficulty) => {\n  let questionScore = 0;\n  if (isCorrect) {\n   if (difficulty === 'easy') {\n     questionScore = 1;\n     setEasyCorrectCount(easyCorrectCount + 1);\n     setDifficulty('easy');\n   } else if (difficulty === 'medium') {\n     questionScore = 2;\n     setMediumCorrectCount(mediumCorrectCount + 1);\n     setDifficulty('medium');\n   } else if (difficulty === 'hard') {\n     questionScore = 3;\n     setHardCorrectCount(hardCorrectCount + 1);\n     setDifficulty('hard');\n   }\n   setScore(score + questionScore);\n  }\n  setAnsweredQuestions(answeredQuestions + 1);\n  const nextQuestions = questions.filter(q => q.difficulty === difficulty);\n  const nextQuestionIndex = nextQuestions.findIndex(q => q.id === questions[currentQuestion].id) + 1;\n  if (nextQuestionIndex < nextQuestions.length) {\n   setCurrentQuestion(currentQuestion + 1);\n  }\n  if (answeredQuestions >= 9) {\n   setShowScore(true);\n  }\n  };*/\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 9\n    }\n  }, \"Loading\") : showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    hasPostedResults: hasPostedResults,\n    setHasPostedResults: setHasPostedResults,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/10\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-level\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 13\n    }\n  }, \"Difficulty level: \", questions[currentQuestion].difficulty)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 257,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer, questions[currentQuestion].difficulty);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 259,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  }))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","useEffect","_","Link","Score","axios","Quiz","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","hasPostedResults","setHasPostedResults","_useState13","_useState14","answeredQuestions","setAnsweredQuestions","_useState15","_useState16","easyCorrectCount","setEasyCorrectCount","_useState17","_useState18","mediumCorrectCount","setMediumCorrectCount","_useState19","_useState20","hardCorrectCount","setHardCorrectCount","_useState21","_useState22","difficulty","setDifficulty","get","then","response","easyQuestions","data","filter","q","selectedQuestion","sample","catch","error","console","log","handleAnswerOptionClick","isCorrect","questionScore","nextQuestions","currentQuestionIndex","findIndex","id","nextQuestionIndex","length","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","Fragment","question","chunk","shuffle","options","map","optionChunk","option","onClick","answer"],"sources":["/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [answeredQuestions, setAnsweredQuestions] = useState(0);\n  const [easyCorrectCount, setEasyCorrectCount] = useState(0);\n  const [mediumCorrectCount, setMediumCorrectCount] = useState(0);\n  const [hardCorrectCount, setHardCorrectCount] = useState(0);\n  const [difficulty, setDifficulty] = useState('easy');\n/*useEffect(() => {\n  axios\n    .get('http://localhost:8000/api/questions')\n    .then((response) => {\n      // Randomly select questions from the data retrieved from the API\n      const selectedQuestions = _.sampleSize(response.data);\n      // Set the questions state variable to the selected questions\n      setQuestions(_.shuffle(selectedQuestions));\n      setIsLoading(false);\n      \n    })\n    .catch((error) => {\n      console.log(error);\n      setIsLoading(false);\n    });\n}, []);*/\n useEffect(() => {\n  axios\n    .get('http://localhost:8000/api/questions')\n    .then((response) => {\n      // Filter the questions to only include those with difficulty set to \"easy\"\n      const easyQuestions = response.data.filter(q => q.difficulty === 'easy');\n      // Select a random question from the filtered questions\n      const selectedQuestion = _.sample(easyQuestions);\n      // Set the questions state variable to the selected question\n      setQuestions([selectedQuestion]);\n      setIsLoading(false);\n    })\n    .catch((error) => {\n      console.log(error);\n      setIsLoading(false);\n    });\n}, []);\n\n  useEffect(() => {\n    console.log('Current Score:', score);\n  }, [score]);\n  const handleAnswerOptionClick = (isCorrect, difficulty) => {\n  let questionScore = 0;\n  if (isCorrect) {\n    if (difficulty === 'easy') {\n      questionScore = 1;\n      setEasyCorrectCount(easyCorrectCount + 1);\n      setDifficulty('easy');\n    } else if (difficulty === 'medium') {\n      questionScore = 2;\n      setMediumCorrectCount(mediumCorrectCount + 1);\n      setDifficulty('medium');\n    } else if (difficulty === 'hard') {\n      questionScore = 3;\n      setHardCorrectCount(hardCorrectCount + 1);\n      setDifficulty('hard');\n    }\n    setScore(score + questionScore);\n  }\n  setAnsweredQuestions(answeredQuestions + 1);\n\n  // Filter the next questions based on the selected difficulty\n  const nextQuestions = questions.filter(q => q.difficulty === difficulty);\n\n  // Get the index of the current question in the filtered next questions\n  const currentQuestionIndex = nextQuestions.findIndex(q => q.id === questions[currentQuestion].id);\n\n  // Set the next question index based on the current question index and the length of the filtered next questions\n  const nextQuestionIndex = currentQuestionIndex < nextQuestions.length - 1 ? currentQuestionIndex + 1 : 0;\n\n  // Set the current question state to the index of the next question\n  setCurrentQuestion(questions.findIndex(q => q.id === nextQuestions[nextQuestionIndex].id));\n\n  if (answeredQuestions >= 9) {\n    setShowScore(true);\n  }\n};\n\n   /*const handleAnswerOptionClick = (isCorrect, difficulty) => {\n  let questionScore = 0;\n  if (isCorrect) {\n    if (difficulty === 'easy') {\n      questionScore = 1;\n      setEasyCorrectCount(easyCorrectCount + 1);\n      setDifficulty('easy');\n    } else if (difficulty === 'medium') {\n      questionScore = 2;\n      setMediumCorrectCount(mediumCorrectCount + 1);\n      setDifficulty('medium');\n    } else if (difficulty === 'hard') {\n      questionScore = 3;\n      setHardCorrectCount(hardCorrectCount + 1);\n      setDifficulty('hard');\n    }\n    setScore(score + questionScore);\n  }\n  setAnsweredQuestions(answeredQuestions + 1);\n  const nextQuestions = questions.filter(q => q.difficulty === difficulty);\n  const nextQuestionIndex = nextQuestions.findIndex(q => q.id === questions[currentQuestion].id) + 1;\n  if (nextQuestionIndex < nextQuestions.length) {\n    setCurrentQuestion(currentQuestion + 1);\n  }\n\n  if (answeredQuestions >= 9) {\n    setShowScore(true);\n  }\n};*/\n\n\n\n\n\n return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/10\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">\n              Difficulty level: {questions[currentQuestion].difficulty}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(\n                        option === questions[currentQuestion].answer,\n                        questions[currentQuestion].difficulty\n                      )\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;"],"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"},"metadata":{},"sourceType":"module"}