{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  Object.defineProperty(Constructor, \"prototype\", {\n    writable: false\n  });\n  return Constructor;\n}\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  Object.defineProperty(subClass, \"prototype\", {\n    writable: false\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n  return _setPrototypeOf(o, p);\n}\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = _getPrototypeOf(Derived),\n      result;\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n    return _possibleConstructorReturn(this, result);\n  };\n}\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (typeof call === \"object\" || typeof call === \"function\")) {\n    return call;\n  } else if (call !== void 0) {\n    throw new TypeError(\"Derived constructors may only return object or undefined\");\n  }\n  return _assertThisInitialized(self);\n}\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n  return self;\n}\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\n/* global setTimeout:false */\nimport React from \"react\";\nimport PropTypes from \"prop-types\";\nimport * as d3Ease from \"victory-vendor/d3-ease\";\nimport { victoryInterpolator } from \"./util\";\nimport TimerContext from \"../victory-util/timer-context\";\nimport isEqual from \"react-fast-compare\";\nexport var VictoryAnimation = /*#__PURE__*/function (_React$Component) {\n  _inherits(VictoryAnimation, _React$Component);\n  var _super = _createSuper(VictoryAnimation);\n  function VictoryAnimation(props, context) {\n    var _this;\n    _classCallCheck(this, VictoryAnimation);\n    _this = _super.call(this, props, context);\n    /* defaults */\n\n    _this.interpolator = void 0;\n    _this.queue = void 0;\n    _this.ease = void 0;\n    _this.timer = void 0;\n    _this.loopID = void 0;\n    _this.functionToBeRunEachFrame = function (elapsed, duration) {\n      /*\n        step can generate imprecise values, sometimes greater than 1\n        if this happens set the state to 1 and return, cancelling the timer\n      */\n      duration = duration !== undefined ? duration : _this.props.duration;\n      var step = duration ? elapsed / duration : 1;\n      if (step >= 1) {\n        _this.setState({\n          data: _this.interpolator(1),\n          animationInfo: {\n            progress: 1,\n            animating: false,\n            terminating: true\n          }\n        });\n        if (_this.loopID) {\n          _this.timer.unsubscribe(_this.loopID);\n        }\n        _this.queue.shift();\n        _this.traverseQueue();\n        return;\n      }\n      /*\n        if we're not at the end of the timer, set the state by passing\n        current step value that's transformed by the ease function to the\n        interpolator, which is cached for performance whenever props are received\n      */\n\n      _this.setState({\n        data: _this.interpolator(_this.ease(step)),\n        animationInfo: {\n          progress: step,\n          animating: step < 1\n        }\n      });\n    };\n    _this.state = {\n      data: Array.isArray(_this.props.data) ? _this.props.data[0] : _this.props.data,\n      animationInfo: {\n        progress: 0,\n        animating: false\n      }\n    };\n    _this.interpolator = null;\n    _this.queue = Array.isArray(_this.props.data) ? _this.props.data.slice(1) : [];\n    /* build easing function */\n\n    _this.ease = d3Ease[_this.toNewName(_this.props.easing)];\n    _this.timer = _this.context.animationTimer;\n    return _this;\n  }\n  _createClass(VictoryAnimation, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      // Length check prevents us from triggering `onEnd` in `traverseQueue`.\n      if (this.queue.length) {\n        this.traverseQueue();\n      }\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate(prevProps) {\n      var equalProps = isEqual(this.props, prevProps);\n      if (!equalProps) {\n        /* If the previous animation didn't finish, force it to complete before starting a new one */\n        if (this.interpolator && this.state.animationInfo && this.state.animationInfo.progress < 1) {\n          // eslint-disable-next-line react/no-did-update-set-state\n          this.setState({\n            data: this.interpolator(1),\n            animationInfo: {\n              progress: 1,\n              animating: false,\n              terminating: true\n            }\n          });\n        } else {\n          /* cancel existing loop if it exists */\n          this.timer.unsubscribe(this.loopID);\n          /* If an object was supplied */\n\n          if (!Array.isArray(this.props.data)) {\n            // Replace the tween queue. Could set `this.queue = [nextProps.data]`,\n            // but let's reuse the same array.\n            this.queue.length = 0;\n            this.queue.push(this.props.data);\n            /* If an array was supplied */\n          } else {\n            var _this$queue;\n\n            /* Extend the tween queue */\n            (_this$queue = this.queue).push.apply(_this$queue, _toConsumableArray(this.props.data));\n          }\n          /* Start traversing the tween queue */\n\n          this.traverseQueue();\n        }\n      }\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      if (this.loopID) {\n        this.timer.unsubscribe(this.loopID);\n      } else {\n        this.timer.stop();\n      }\n    }\n  }, {\n    key: \"toNewName\",\n    value: function toNewName(ease) {\n      // d3-ease changed the naming scheme for ease from \"linear\" -> \"easeLinear\" etc.\n      var capitalize = function capitalize(s) {\n        return s && s[0].toUpperCase() + s.slice(1);\n      };\n      return \"ease\".concat(capitalize(ease));\n    }\n    /* Traverse the tween queue */\n  }, {\n    key: \"traverseQueue\",\n    value: function traverseQueue() {\n      var _this2 = this;\n      if (this.queue.length) {\n        /* Get the next index */\n        var data = this.queue[0];\n        /* compare cached version to next props */\n\n        this.interpolator = victoryInterpolator(this.state.data, data);\n        /* reset step to zero */\n\n        if (this.props.delay) {\n          setTimeout(function () {\n            _this2.loopID = _this2.timer.subscribe(_this2.functionToBeRunEachFrame, _this2.props.duration);\n          }, this.props.delay);\n        } else {\n          this.loopID = this.timer.subscribe(this.functionToBeRunEachFrame, this.props.duration);\n        }\n      } else if (this.props.onEnd) {\n        this.props.onEnd();\n      }\n    }\n    /* every frame we... */\n  }, {\n    key: \"render\",\n    value: function render() {\n      return this.props.children(this.state.data, this.state.animationInfo);\n    }\n  }]);\n  return VictoryAnimation;\n}(React.Component);\nVictoryAnimation.displayName = \"VictoryAnimation\";\nVictoryAnimation.propTypes = {\n  children: PropTypes.func,\n  data: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  delay: PropTypes.number,\n  duration: PropTypes.number,\n  easing: PropTypes.oneOf([\"back\", \"backIn\", \"backOut\", \"backInOut\", \"bounce\", \"bounceIn\", \"bounceOut\", \"bounceInOut\", \"circle\", \"circleIn\", \"circleOut\", \"circleInOut\", \"linear\", \"linearIn\", \"linearOut\", \"linearInOut\", \"cubic\", \"cubicIn\", \"cubicOut\", \"cubicInOut\", \"elastic\", \"elasticIn\", \"elasticOut\", \"elasticInOut\", \"exp\", \"expIn\", \"expOut\", \"expInOut\", \"poly\", \"polyIn\", \"polyOut\", \"polyInOut\", \"quad\", \"quadIn\", \"quadOut\", \"quadInOut\", \"sin\", \"sinIn\", \"sinOut\", \"sinInOut\"]),\n  onEnd: PropTypes.func\n};\nVictoryAnimation.defaultProps = {\n  data: {},\n  delay: 0,\n  duration: 1000,\n  easing: \"quadInOut\"\n};\nVictoryAnimation.contextType = TimerContext;","map":null,"metadata":{},"sourceType":"module"}