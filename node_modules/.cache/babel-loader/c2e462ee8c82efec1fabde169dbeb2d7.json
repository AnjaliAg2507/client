{"ast":null,"code":"import _slicedToArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js\";\n/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\nvar Quiz = function Quiz() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isLoading = _useState10[0],\n    setIsLoading = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasPostedResults = _useState12[0],\n    setHasPostedResults = _useState12[1];\n  var _useState13 = useState(0),\n    _useState14 = _slicedToArray(_useState13, 2),\n    answeredQuestions = _useState14[0],\n    setAnsweredQuestions = _useState14[1];\n  var _useState15 = useState(0),\n    _useState16 = _slicedToArray(_useState15, 2),\n    easyCorrectCount = _useState16[0],\n    setEasyCorrectCount = _useState16[1];\n  var _useState17 = useState(0),\n    _useState18 = _slicedToArray(_useState17, 2),\n    mediumCorrectCount = _useState18[0],\n    setMediumCorrectCount = _useState18[1];\n  var _useState19 = useState(0),\n    _useState20 = _slicedToArray(_useState19, 2),\n    hardCorrectCount = _useState20[0],\n    setHardCorrectCount = _useState20[1];\n  var _useState21 = useState('easy'),\n    _useState22 = _slicedToArray(_useState21, 2),\n    difficulty = _useState22[0],\n    setDifficulty = _useState22[1];\n  useEffect(function () {\n    axios.get('http://localhost:8000/api/questions').then(function (response) {\n      // Filter questions to only include easy questions\n      var easyQuestions = response.data.filter(function (q) {\n        return q.difficulty === 'easy';\n      });\n      // Randomly select one of the easy questions\n      var selectedQuestion = _.sample(easyQuestions);\n      // Set the questions state variable to include only the selected question\n      setQuestions([selectedQuestion]);\n      setIsLoading(false);\n    }).catch(function (error) {\n      console.log(error);\n      setIsLoading(false);\n    });\n  }, []);\n  useEffect(function () {\n    console.log('Current Score:', score);\n  }, [score]);\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect, questionDifficulty) {\n    var questionScore = 0;\n    if (isCorrect) {\n      if (questionDifficulty === 'easy') {\n        questionScore = 1;\n        setEasyCorrectCount(easyCorrectCount + 1);\n      } else if (questionDifficulty === 'medium') {\n        questionScore = 2;\n        setMediumCorrectCount(mediumCorrectCount + 1);\n      } else if (questionDifficulty === 'hard') {\n        questionScore = 3;\n        setHardCorrectCount(hardCorrectCount + 1);\n      }\n      setScore(score + questionScore);\n    }\n    setAnsweredQuestions(answeredQuestions + 1);\n    var nextQuestionIndex = currentQuestion + 1;\n    var nextDifficulty = difficulty;\n    if (difficulty === 'easy' && easyCorrectCount < 2) {\n      // Display another easy question\n      nextDifficulty = 'easy';\n    } else if (difficulty === 'easy' && easyCorrectCount >= 2) {\n      // Move on to medium questions\n      nextDifficulty = 'medium';\n      setMediumCorrectCount(0);\n    } else if (difficulty === 'medium' && mediumCorrectCount < 2) {\n      // Display another medium question\n      nextDifficulty = 'medium';\n    } else if (difficulty === 'medium' && mediumCorrectCount >= 2) {\n      // Move on to hard questions\n      nextDifficulty = 'hard';\n      setHardCorrectCount(0);\n    } else if (difficulty === 'hard') {\n      // Display another hard question\n      nextDifficulty = 'hard';\n    }\n    var nextQuestions = questions.filter(function (q) {\n      return q.difficulty === nextDifficulty;\n    });\n    if (nextQuestionIndex >= nextQuestions.length) {\n      // If we've run out of questions at the current difficulty level, move to the next level\n      nextDifficulty = nextDifficulty === 'easy' ? 'medium' : 'hard';\n      nextQuestionIndex = 0;\n    }\n    setCurrentQuestion(nextQuestionIndex);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }\n  }, \"Loading\") : showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    hasPostedResults: hasPostedResults,\n    setHasPostedResults: setHasPostedResults,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/10\"), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-level\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215,\n      columnNumber: 13\n    }\n  }, \"Difficulty level: \", questions[currentQuestion].difficulty)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 221,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer, questions[currentQuestion].difficulty);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 223,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  }))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","useEffect","_","Link","Score","axios","Quiz","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","hasPostedResults","setHasPostedResults","_useState13","_useState14","answeredQuestions","setAnsweredQuestions","_useState15","_useState16","easyCorrectCount","setEasyCorrectCount","_useState17","_useState18","mediumCorrectCount","setMediumCorrectCount","_useState19","_useState20","hardCorrectCount","setHardCorrectCount","_useState21","_useState22","difficulty","setDifficulty","get","then","response","easyQuestions","data","filter","q","selectedQuestion","sample","catch","error","console","log","handleAnswerOptionClick","isCorrect","questionDifficulty","questionScore","nextQuestionIndex","nextDifficulty","nextQuestions","length","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","Fragment","question","chunk","shuffle","options","map","optionChunk","option","onClick","answer"],"sources":["/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [answeredQuestions, setAnsweredQuestions] = useState(0);\n  const [easyCorrectCount, setEasyCorrectCount] = useState(0);\n  const [mediumCorrectCount, setMediumCorrectCount] = useState(0);\n  const [hardCorrectCount, setHardCorrectCount] = useState(0);\n  const [difficulty, setDifficulty] = useState('easy');\n  \n  useEffect(() => {\n  axios\n    .get('http://localhost:8000/api/questions')\n    .then((response) => {\n      // Filter questions to only include easy questions\n      const easyQuestions = response.data.filter(q => q.difficulty === 'easy');\n      // Randomly select one of the easy questions\n      const selectedQuestion = _.sample(easyQuestions);\n      // Set the questions state variable to include only the selected question\n      setQuestions([selectedQuestion]);\n      setIsLoading(false);\n    })\n    .catch((error) => {\n      console.log(error);\n      setIsLoading(false);\n    });\n}, []);\n\n  useEffect(() => {\n    console.log('Current Score:', score);\n  }, [score]);\n\n  const handleAnswerOptionClick = (isCorrect, questionDifficulty) => {\n    let questionScore = 0;\n    if (isCorrect) {\n      if (questionDifficulty === 'easy') {\n        questionScore = 1;\n        setEasyCorrectCount(easyCorrectCount + 1);\n      } else if (questionDifficulty === 'medium') {\n        questionScore = 2;\n        setMediumCorrectCount(mediumCorrectCount + 1);\n      } else if (questionDifficulty === 'hard') {\n        questionScore = 3;\n        setHardCorrectCount(hardCorrectCount + 1);\n      }\n      setScore(score + questionScore);\n    }\n    setAnsweredQuestions(answeredQuestions + 1);\n\n    let nextQuestionIndex = currentQuestion + 1;\n    let nextDifficulty = difficulty;\n    if (difficulty === 'easy' && easyCorrectCount < 2) {\n      // Display another easy question\n      nextDifficulty = 'easy';\n    } else if (difficulty === 'easy' && easyCorrectCount >= 2) {\n      // Move on to medium questions\n      nextDifficulty = 'medium';\n      setMediumCorrectCount(0);\n    } else if (difficulty === 'medium' && mediumCorrectCount < 2) {\n      // Display another medium question\n      nextDifficulty = 'medium';\n    } else if (difficulty === 'medium' && mediumCorrectCount >= 2) {\n      // Move on to hard questions\n      nextDifficulty = 'hard';\n      setHardCorrectCount(0);\n    } else if (difficulty === 'hard') {\n      // Display another hard question\n      nextDifficulty = 'hard';\n    }\n\n    const nextQuestions = questions.filter(q => q.difficulty === nextDifficulty);\n    if (nextQuestionIndex >= nextQuestions.length) {\n      // If we've run out of questions at the current difficulty level, move to the next level\n      nextDifficulty = nextDifficulty === 'easy' ? 'medium' : 'hard';\n      nextQuestionIndex = 0;\n    }\n    setCurrentQuestion(nextQuestionIndex);\n\n};\n\n\n return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/10\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">\n              Difficulty level: {questions[currentQuestion].difficulty}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(\n                        option === questions[currentQuestion].answer,\n                        questions[currentQuestion].difficulty\n                      )\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;"],"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"},"metadata":{},"sourceType":"module"}