{"ast":null,"code":"import _slicedToArray from \"/Users/anjaliagrawal/Desktop/ons/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/ons/src/components/Quiz.js\";\n/*\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\n\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n \n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz}/>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n\n\n*/\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\nimport Score from './Score';\nimport { quizData } from './quizData';\nvar Quiz = function Quiz() {\n  var _useState = useState(_.shuffle(quizData)),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect) {\n    var question = questions[currentQuestion];\n    var latestAnswer = userAnswers[currentQuestion];\n    if (isCorrect) {\n      if (latestAnswer === null) {\n        setScore(score + 1);\n      }\n    } else {\n      if (latestAnswer === question.answer) {\n        setScore(score - 1);\n      }\n    }\n    var nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n  var handlePreviousClick = function handlePreviousClick() {\n    setCurrentQuestion(currentQuestion - 1);\n  };\n  var handleNextClick = function handleNextClick() {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setShowScore(true);\n    }\n  };\n  var restartQuiz = function restartQuiz() {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 5\n    }\n  }, showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    restartQuiz: restartQuiz,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"button-container\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, currentQuestion > 0 && /*#__PURE__*/React.createElement(\"button\", {\n    className: \"previous\",\n    onClick: handlePreviousClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 15\n    }\n  }, \"Previous\"), /*#__PURE__*/React.createElement(\"button\", {\n    className: \"next\",\n    onClick: handleNextClick,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 13\n    }\n  }, currentQuestion + 1 === questions.length ? 'Finish' : 'Next'))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","_","Link","Score","quizData","Quiz","_useState","shuffle","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","handleAnswerOptionClick","isCorrect","question","latestAnswer","userAnswers","answer","nextQuestion","length","handlePreviousClick","handleNextClick","restartQuiz","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","Fragment","chunk","options","map","optionChunk","option","onClick"],"sources":["/Users/anjaliagrawal/Desktop/ons/src/components/Quiz.js"],"sourcesContent":["/*\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Quiz.css';\n\nimport Score from './Score';\nimport {quizData} from './quizData';\n\n\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n \n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setScore(score + 1);\n    }\n\n    const nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz}/>\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n\n\n*/\nimport React, { useState } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './Quiz.css';\n\nimport Score from './Score';\nimport { quizData } from './quizData';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState(_.shuffle(quizData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  const question = questions[currentQuestion];\n  const latestAnswer = userAnswers[currentQuestion];\n  \n  if (isCorrect) {\n    if (latestAnswer === null) {\n      setScore(score + 1);\n    }\n  } else {\n    if (latestAnswer === question.answer) {\n      setScore(score - 1);\n    }\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n\n  const handlePreviousClick = () => {\n    setCurrentQuestion(currentQuestion - 1);\n  };\n\n  const handleNextClick = () => {\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(currentQuestion + 1);\n    } else {\n      setShowScore(true);\n    }\n  };\n\n  const restartQuiz = () => {\n    setQuestions(_.shuffle(quizData));\n    setCurrentQuestion(0);\n    setShowScore(false);\n    setScore(0);\n  };\n\n  return (\n    <div className=\"quiz\">\n      {showScore ? (\n        <Score score={score} totalQuestions={questions.length} restartQuiz={restartQuiz} />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n          <div className=\"button-container\">\n            {currentQuestion > 0 && (\n              <button className=\"previous\" onClick={handlePreviousClick}>\n                Previous\n              </button>\n            )}\n            <button className=\"next\" onClick={handleNextClick}>\n              {currentQuestion + 1 === questions.length ? 'Finish' : 'Next'}\n            </button>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n"],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,CAAC,MAAM,QAAQ;AACtB,SAASC,IAAI,QAAQ,kBAAkB;AACvC,OAAO,YAAY;AAEnB,OAAOC,KAAK,MAAM,SAAS;AAC3B,SAASC,QAAQ,QAAQ,YAAY;AAErC,IAAMC,IAAI,GAAG,SAAPA,IAAIA,CAAA,EAAS;EAAA,IAAAC,SAAA,GACiBN,QAAQ,CAACC,CAAC,CAACM,OAAO,CAACH,QAAQ,CAAC,CAAC;IAAAI,UAAA,GAAAC,cAAA,CAAAH,SAAA;IAAxDI,SAAS,GAAAF,UAAA;IAAEG,YAAY,GAAAH,UAAA;EAAA,IAAAI,UAAA,GACgBZ,QAAQ,CAAC,CAAC,CAAC;IAAAa,UAAA,GAAAJ,cAAA,CAAAG,UAAA;IAAlDE,eAAe,GAAAD,UAAA;IAAEE,kBAAkB,GAAAF,UAAA;EAAA,IAAAG,UAAA,GACRhB,QAAQ,CAAC,KAAK,CAAC;IAAAiB,UAAA,GAAAR,cAAA,CAAAO,UAAA;IAA1CE,SAAS,GAAAD,UAAA;IAAEE,YAAY,GAAAF,UAAA;EAAA,IAAAG,UAAA,GACJpB,QAAQ,CAAC,CAAC,CAAC;IAAAqB,UAAA,GAAAZ,cAAA,CAAAW,UAAA;IAA9BE,KAAK,GAAAD,UAAA;IAAEE,QAAQ,GAAAF,UAAA;EAEtB,IAAMG,uBAAuB,GAAG,SAA1BA,uBAAuBA,CAAIC,SAAS,EAAK;IAC/C,IAAMC,QAAQ,GAAGhB,SAAS,CAACI,eAAe,CAAC;IAC3C,IAAMa,YAAY,GAAGC,WAAW,CAACd,eAAe,CAAC;IAEjD,IAAIW,SAAS,EAAE;MACb,IAAIE,YAAY,KAAK,IAAI,EAAE;QACzBJ,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB;IACF,CAAC,MAAM;MACL,IAAIK,YAAY,KAAKD,QAAQ,CAACG,MAAM,EAAE;QACpCN,QAAQ,CAACD,KAAK,GAAG,CAAC,CAAC;MACrB;IACF;IAEA,IAAMQ,YAAY,GAAGhB,eAAe,GAAG,CAAC;IACxC,IAAIgB,YAAY,GAAGpB,SAAS,CAACqB,MAAM,EAAE;MACnChB,kBAAkB,CAACe,YAAY,CAAC;IAClC,CAAC,MAAM;MACLX,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAGC,IAAMa,mBAAmB,GAAG,SAAtBA,mBAAmBA,CAAA,EAAS;IAChCjB,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;EACzC,CAAC;EAED,IAAMmB,eAAe,GAAG,SAAlBA,eAAeA,CAAA,EAAS;IAC5B,IAAInB,eAAe,GAAG,CAAC,GAAGJ,SAAS,CAACqB,MAAM,EAAE;MAC1ChB,kBAAkB,CAACD,eAAe,GAAG,CAAC,CAAC;IACzC,CAAC,MAAM;MACLK,YAAY,CAAC,IAAI,CAAC;IACpB;EACF,CAAC;EAED,IAAMe,WAAW,GAAG,SAAdA,WAAWA,CAAA,EAAS;IACxBvB,YAAY,CAACV,CAAC,CAACM,OAAO,CAACH,QAAQ,CAAC,CAAC;IACjCW,kBAAkB,CAAC,CAAC,CAAC;IACrBI,YAAY,CAAC,KAAK,CAAC;IACnBI,QAAQ,CAAC,CAAC,CAAC;EACb,CAAC;EAED,oBACExB,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,MAAM;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAClBzB,SAAS,gBACRnB,KAAA,CAAAoC,aAAA,CAAChC,KAAK;IAACmB,KAAK,EAAEA,KAAM;IAACsB,cAAc,EAAElC,SAAS,CAACqB,MAAO;IAACG,WAAW,EAAEA,WAAY;IAAAG,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,gBAEnF5C,KAAA,CAAAoC,aAAA,CAAApC,KAAA,CAAA8C,QAAA,qBACE9C,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,kBAAkB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC/B5C,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBAC7B5C,KAAA,CAAAoC,aAAA;IAAAE,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAM,WAAS,EAAC7B,eAAe,GAAG,CAAC,CAAQ,KAAC,EAACJ,SAAS,CAACqB,MAAM,CACzD,eACNhC,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,eAAe;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAEjC,SAAS,CAACI,eAAe,CAAC,CAACY,QAAQ,CAAO,CACtE,eACN3B,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,gBAAgB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC5B1C,CAAC,CAAC6C,KAAK,CAAC7C,CAAC,CAACM,OAAO,CAACG,SAAS,CAACI,eAAe,CAAC,CAACiC,OAAO,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,UAACC,WAAW;IAAA,oBACzElD,KAAA,CAAAoC,aAAA;MAAKC,SAAS,EAAC,YAAY;MAAAC,MAAA,EAAAC,KAAA;MAAAC,QAAA;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA;IAAA,GACxBM,WAAW,CAACD,GAAG,CAAC,UAACE,MAAM;MAAA,oBACtBnD,KAAA,CAAAoC,aAAA;QACEgB,OAAO,EAAE,SAAAA,QAAA;UAAA,OACP3B,uBAAuB,CAAC0B,MAAM,KAAKxC,SAAS,CAACI,eAAe,CAAC,CAACe,MAAM,CAAC;QAAA,CACtE;QAAAQ,MAAA,EAAAC,KAAA;QAAAC,QAAA;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA;MAAA,GAEAO,MAAM,CACA;IAAA,CACV,CAAC,CACE;EAAA,CACP,CAAC,CACE,eACNnD,KAAA,CAAAoC,aAAA;IAAKC,SAAS,EAAC,kBAAkB;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC9B7B,eAAe,GAAG,CAAC,iBAClBf,KAAA,CAAAoC,aAAA;IAAQC,SAAS,EAAC,UAAU;IAACe,OAAO,EAAEnB,mBAAoB;IAAAK,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAC,UAE3D,CACD,eACD5C,KAAA,CAAAoC,aAAA;IAAQC,SAAS,EAAC,MAAM;IAACe,OAAO,EAAElB,eAAgB;IAAAI,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAC/C7B,eAAe,GAAG,CAAC,KAAKJ,SAAS,CAACqB,MAAM,GAAG,QAAQ,GAAG,MAAM,CACtD,CACL,CAET,CACG;AAEV,CAAC;AAED,eAAe1B,IAAI"},"metadata":{},"sourceType":"module"}