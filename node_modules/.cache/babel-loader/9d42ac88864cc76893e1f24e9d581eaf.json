{"ast":null,"code":"function _toConsumableArray(arr) {\n  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\nfunction _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\nfunction _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) {\n    arr2[i] = arr[i];\n  }\n  return arr2;\n}\nfunction isNonEmptyArray(collection) {\n  return Array.isArray(collection) && collection.length > 0;\n}\nexport function containsStrings(collection) {\n  return Array.isArray(collection) && collection.some(function (value) {\n    return typeof value === \"string\";\n  });\n}\nexport function containsDates(collection) {\n  return Array.isArray(collection) && collection.some(function (value) {\n    return value instanceof Date;\n  });\n}\nexport function containsNumbers(collection) {\n  return Array.isArray(collection) && collection.some(function (value) {\n    return typeof value === \"number\";\n  });\n}\nexport function containsOnlyStrings(collection) {\n  return isNonEmptyArray(collection) && collection.every(function (value) {\n    return typeof value === \"string\";\n  });\n}\nexport function isArrayOfArrays(collection) {\n  return isNonEmptyArray(collection) && collection.every(Array.isArray);\n}\nexport function removeUndefined(arr) {\n  return arr.filter(function (el) {\n    return el !== undefined;\n  });\n}\nexport function getMaxValue(arr) {\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n  var array = arr.concat(values);\n  return containsDates(array) ? new Date(Math.max.apply(Math, _toConsumableArray(array))) // Dates will be coerced to numbers\n  : Math.max.apply(Math, _toConsumableArray(array));\n}\nexport function getMinValue(arr) {\n  for (var _len2 = arguments.length, values = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {\n    values[_key2 - 1] = arguments[_key2];\n  }\n  var array = arr.concat(values);\n  return containsDates(array) ? new Date(Math.min.apply(Math, _toConsumableArray(array))) // Dates will be coerced to numbers\n  : Math.min.apply(Math, _toConsumableArray(array));\n}","map":null,"metadata":{},"sourceType":"module"}