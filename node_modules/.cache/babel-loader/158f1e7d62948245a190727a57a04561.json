{"ast":null,"code":"var _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/quiz/client/src/components/Dashboard.js\";\nimport React from 'react';\nimport ScoreDistribution from './ScoreDistribution';\nimport TopicPerformance from './TopicPerformance';\nimport './styles/Dashboard.css';\nvar Dashboard = function Dashboard() {\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"dashboard\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }\n  }, \"Dashboard\"), /*#__PURE__*/React.createElement(ScoreDistribution, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }\n  }));\n};\nexport default Dashboard;\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport './styles/Dashboard.css';\nimport axios from 'axios';\nimport { VictoryBar, VictoryChart, VictoryAxis } from 'victory';\nconst Dashboard = () => {\n  const [students, setStudents] = useState([]);\n  const [topics, setTopics] = useState([]);\n  const [scoreDistribution, setScoreDistribution] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios.get('http://localhost:8000/api/result')\n      .then(response => {\n        // Set the students state variable to the data retrieved from the API\n        setStudents(response.data);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.log(error);\n        setIsLoading(false);\n      });\n\n    fetchTopics();\n  }, []);\n\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/api/result/topic');\n      setTopics(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    // Calculate the score distribution for each topic\n    const scoreDistributionByTopic = {};\n    topics.forEach(topic => {\n      const scores = students.filter(student => student.topic === topic).map(student => student.point);\n      const scoreCounts = Array.from({ length: 6 }, () => 0);\n      scores.forEach(score => {\n        scoreCounts[Math.floor(score / 5)]++;\n      });\n      scoreDistributionByTopic[topic] = scoreCounts;\n    });\n    setScoreDistribution(scoreDistributionByTopic);\n  }, [students, topics]);\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <p>Loading</p>\n      </div>\n    );\n  }\n\n  return (\n  <div className=\"dashboard\">\n    <h1>DASHBOARD</h1>\n    <div className=\"score-distribution\">\n      <h2>Score Distribution by Topic</h2>\n      {Object.keys(scoreDistribution).map(topic => {\n        const uniqueRollNumbers = new Set(students.filter(student => student.topic === topic).map(student => student.rollNumber));\n        const yAxisDomainMax = Math.ceil(uniqueRollNumbers.size / 5) * 5;\n        return (\n          <div key={topic} className=\"score-distribution-chart\">\n            <h3>{topic}</h3>\n            <VictoryChart domainPadding={20} padding={{ left: 50, right: 50, top: 10, bottom: 50 }}>\n              <VictoryAxis\n                dependentAxis\n                label=\"No. Of Students\"\n                tickFormat={(x) => (`${x}`)}\n                domain={[0, yAxisDomainMax]}\n              />\n              <VictoryAxis\n                label=\"Score\"\n                tickValues={[0, 5, 10, 15, 20, 25]}\n                tickFormat={(x) => (`${x}-${x+5}`)}\n                domain={[0, 25]}\n                tickCount={6}\n                labelPlacement=\"end\"\n              />\n              <VictoryBar\n                data={scoreDistribution[topic].map((count, score) => ({ score: score * 5, count }))}\n                x=\"score\"\n                y=\"count\"\n                style={{\n                  data: {\n                    fill: 'rgba(54, 162, 235, 0.5)',\n                    stroke: 'rgba(54, 162, 235, 1)',\n                    strokeWidth: 0.5,\n                  },\n                }}\n                align=\"center\"\n              />\n            </VictoryChart>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n\n\n};\nexport default Dashboard;\n\n*/","map":{"version":3,"names":["React","ScoreDistribution","TopicPerformance","Dashboard","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/anjaliagrawal/Desktop/quiz/client/src/components/Dashboard.js"],"sourcesContent":["import React from 'react';\nimport ScoreDistribution from './ScoreDistribution';\nimport TopicPerformance from './TopicPerformance';\nimport './styles/Dashboard.css';\n\nconst Dashboard = () => {\n  return (\n    <div className=\"dashboard\">\n      <h1>Dashboard</h1>\n      <ScoreDistribution />\n\n    </div>\n  );\n};\n\nexport default Dashboard;\n\n\n/*\nimport React, { useState, useEffect } from 'react';\nimport './styles/Dashboard.css';\nimport axios from 'axios';\nimport { VictoryBar, VictoryChart, VictoryAxis } from 'victory';\nconst Dashboard = () => {\n  const [students, setStudents] = useState([]);\n  const [topics, setTopics] = useState([]);\n  const [scoreDistribution, setScoreDistribution] = useState({});\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios.get('http://localhost:8000/api/result')\n      .then(response => {\n        // Set the students state variable to the data retrieved from the API\n        setStudents(response.data);\n        setIsLoading(false);\n      })\n      .catch(error => {\n        console.log(error);\n        setIsLoading(false);\n      });\n\n    fetchTopics();\n  }, []);\n\n  const fetchTopics = async () => {\n    try {\n      const response = await axios.get('http://localhost:8000/api/result/topic');\n      setTopics(response.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    // Calculate the score distribution for each topic\n    const scoreDistributionByTopic = {};\n    topics.forEach(topic => {\n      const scores = students.filter(student => student.topic === topic).map(student => student.point);\n      const scoreCounts = Array.from({ length: 6 }, () => 0);\n      scores.forEach(score => {\n        scoreCounts[Math.floor(score / 5)]++;\n      });\n      scoreDistributionByTopic[topic] = scoreCounts;\n    });\n    setScoreDistribution(scoreDistributionByTopic);\n  }, [students, topics]);\n\n  if (isLoading) {\n    return (\n      <div className=\"loading\">\n        <p>Loading</p>\n      </div>\n    );\n  }\n\n  return (\n  <div className=\"dashboard\">\n    <h1>DASHBOARD</h1>\n    <div className=\"score-distribution\">\n      <h2>Score Distribution by Topic</h2>\n      {Object.keys(scoreDistribution).map(topic => {\n        const uniqueRollNumbers = new Set(students.filter(student => student.topic === topic).map(student => student.rollNumber));\n        const yAxisDomainMax = Math.ceil(uniqueRollNumbers.size / 5) * 5;\n        return (\n          <div key={topic} className=\"score-distribution-chart\">\n            <h3>{topic}</h3>\n            <VictoryChart domainPadding={20} padding={{ left: 50, right: 50, top: 10, bottom: 50 }}>\n              <VictoryAxis\n                dependentAxis\n                label=\"No. Of Students\"\n                tickFormat={(x) => (`${x}`)}\n                domain={[0, yAxisDomainMax]}\n              />\n              <VictoryAxis\n                label=\"Score\"\n                tickValues={[0, 5, 10, 15, 20, 25]}\n                tickFormat={(x) => (`${x}-${x+5}`)}\n                domain={[0, 25]}\n                tickCount={6}\n                labelPlacement=\"end\"\n              />\n              <VictoryBar\n                data={scoreDistribution[topic].map((count, score) => ({ score: score * 5, count }))}\n                x=\"score\"\n                y=\"count\"\n                style={{\n                  data: {\n                    fill: 'rgba(54, 162, 235, 0.5)',\n                    stroke: 'rgba(54, 162, 235, 1)',\n                    strokeWidth: 0.5,\n                  },\n                }}\n                align=\"center\"\n              />\n            </VictoryChart>\n          </div>\n        );\n      })}\n    </div>\n  </div>\n);\n\n\n};\nexport default Dashboard;\n\n*/\n   \n\n\n\n\n\n\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,gBAAgB,MAAM,oBAAoB;AACjD,OAAO,wBAAwB;AAE/B,IAAMC,SAAS,GAAG,SAAZA,SAASA,CAAA,EAAS;EACtB,oBACEH,KAAA,CAAAI,aAAA;IAAKC,SAAS,EAAC,WAAW;IAAAC,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,gBACxBZ,KAAA,CAAAI,aAAA;IAAAE,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,GAAI,WAAS,CAAK,eAClBZ,KAAA,CAAAI,aAAA,CAACH,iBAAiB;IAAAK,MAAA,EAAAC,KAAA;IAAAC,QAAA;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA;EAAA,EAAG,CAEjB;AAEV,CAAC;AAED,eAAeT,SAAS;;AAGx},"metadata":{},"sourceType":"module"}