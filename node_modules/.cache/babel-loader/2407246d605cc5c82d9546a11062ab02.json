{"ast":null,"code":"import _toConsumableArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/anjaliagrawal/Desktop/quiz/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _this = this,\n  _jsxFileName = \"/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js\";\n/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\nvar Quiz = function Quiz() {\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    questions = _useState2[0],\n    setQuestions = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    currentQuestion = _useState4[0],\n    setCurrentQuestion = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    showScore = _useState6[0],\n    setShowScore = _useState6[1];\n  var _useState7 = useState(0),\n    _useState8 = _slicedToArray(_useState7, 2),\n    score = _useState8[0],\n    setScore = _useState8[1];\n  var _useState9 = useState(true),\n    _useState10 = _slicedToArray(_useState9, 2),\n    isLoading = _useState10[0],\n    setIsLoading = _useState10[1];\n  var _useState11 = useState(false),\n    _useState12 = _slicedToArray(_useState11, 2),\n    hasPostedResults = _useState12[0],\n    setHasPostedResults = _useState12[1];\n  var _useState13 = useState(null),\n    _useState14 = _slicedToArray(_useState13, 2),\n    previousDifficulty = _useState14[0],\n    setPreviousDifficulty = _useState14[1]; // Define variables here\n  var easyQuestions = [];\n  var mediumQuestions = [];\n  var hardQuestions = [];\n  var allQuestions = [];\n  useEffect(function () {\n    // Make an HTTP GET request to your backend API endpoint\n    axios.get('http://localhost:8000/api/questions').then(function (response) {\n      // Shuffle the questions for each difficulty level\n      easyQuestions = _.shuffle(response.data.filter(function (question) {\n        return question.difficulty === 'easy';\n      }));\n      mediumQuestions = _.shuffle(response.data.filter(function (question) {\n        return question.difficulty === 'medium';\n      }));\n      hardQuestions = _.shuffle(response.data.filter(function (question) {\n        return question.difficulty === 'hard';\n      }));\n\n      // Combine the shuffled questions into a single array\n      allQuestions = [].concat(_toConsumableArray(easyQuestions), _toConsumableArray(mediumQuestions), _toConsumableArray(hardQuestions));\n\n      // Set the questions state variable to all the shuffled questions\n      setQuestions(allQuestions);\n\n      // Set the current difficulty to 'easy'\n      var currentDifficulty = 'easy';\n\n      // Set the number of answered questions to 0\n      var answeredQuestions = 0;\n\n      // Set the score to 0\n      setScore(0);\n\n      // Set the current question index to 0\n      setCurrentQuestion(0);\n      setIsLoading(false);\n    }).catch(function (error) {\n      console.log(error);\n      setIsLoading(false);\n    });\n  }, []);\n  var handleAnswerOptionClick = function handleAnswerOptionClick(isCorrect, difficulty) {\n    var questionScore = 0;\n    if (isCorrect) {\n      if (difficulty === 'easy') {\n        questionScore = 1;\n      } else if (difficulty === 'medium') {\n        questionScore = 2;\n      } else if (difficulty === 'hard') {\n        questionScore = 3;\n      }\n      setScore(score + questionScore);\n    }\n    var nextQuestion = currentQuestion + 1;\n    if (nextQuestion < questions.length) {\n      setCurrentQuestion(nextQuestion);\n    } else {\n      setShowScore(true);\n    }\n  };\n  useEffect(function () {\n    console.log('Current Score:', score);\n  }, [score]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"quiz\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 5\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"loading\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 9\n    }\n  }, \"Loading\") : showScore ? /*#__PURE__*/React.createElement(Score, {\n    score: score,\n    totalQuestions: questions.length,\n    hasPostedResults: hasPostedResults,\n    setHasPostedResults: setHasPostedResults,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-count\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 13\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 15\n    }\n  }, \"Question \", currentQuestion + 1), \"/\", questions.length), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"question-text\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 208,\n      columnNumber: 13\n    }\n  }, questions[currentQuestion].question), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"difficulty-level\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 209,\n      columnNumber: 13\n    }\n  }, \"Difficulty level: \", questions[currentQuestion].difficulty)), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"answer-section\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 11\n    }\n  }, _.chunk(_.shuffle(questions[currentQuestion].options), 2).map(function (optionChunk) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"answer-row\",\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 15\n      }\n    }, optionChunk.map(function (option) {\n      return /*#__PURE__*/React.createElement(\"button\", {\n        onClick: function onClick() {\n          return handleAnswerOptionClick(option === questions[currentQuestion].answer, questions[currentQuestion].difficulty);\n        },\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 19\n        }\n      }, option);\n    }));\n  }))));\n};\nexport default Quiz;","map":{"version":3,"names":["React","useState","useEffect","useRef","_","Link","Score","axios","Quiz","_useState","_useState2","_slicedToArray","questions","setQuestions","_useState3","_useState4","currentQuestion","setCurrentQuestion","_useState5","_useState6","showScore","setShowScore","_useState7","_useState8","score","setScore","_useState9","_useState10","isLoading","setIsLoading","_useState11","_useState12","hasPostedResults","setHasPostedResults","_useState13","_useState14","previousDifficulty","setPreviousDifficulty","easyQuestions","mediumQuestions","hardQuestions","allQuestions","get","then","response","shuffle","data","filter","question","difficulty","concat","_toConsumableArray","currentDifficulty","answeredQuestions","catch","error","console","log","handleAnswerOptionClick","isCorrect","questionScore","nextQuestion","length","createElement","className","__self","_this","__source","fileName","_jsxFileName","lineNumber","columnNumber","totalQuestions","Fragment","chunk","options","map","optionChunk","option","onClick","answer"],"sources":["/Users/anjaliagrawal/Desktop/quiz/client/src/components/Quiz.js"],"sourcesContent":["/*import React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  useEffect(() => {\n    // Make an HTTP GET request to your backend API endpoint\n    axios\n      .get('http://localhost:8000/api/questions')\n      .then((response) => {\n        // Randomly select 10 questions from the data retrieved from the API\n        const selectedQuestions = _.sampleSize(response.data, 10);\n        // Set the questions state variable to the selected questions\n        setQuestions(_.shuffle(selectedQuestions));\n        setIsLoading(false);\n      })\n      .catch((error) => {\n        console.log(error);\n        setIsLoading(false);\n      });\n  }, []);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n  let questionDifficulty = questions[currentQuestion].difficulty;\n  let points;\n  if (questionDifficulty === \"easy\") {\n    points = 1;\n  } else if (questionDifficulty === \"medium\") {\n    points = 2;\n  } else if (questionDifficulty === \"difficult\") {\n    points = 3;\n  }\n\n  if (isCorrect) {\n    setScore(score + points);\n  }\n\n  const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n \n  \n  \n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n         <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">Difficulty level: {questions[currentQuestion].difficulty}</div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(option === questions[currentQuestion].answer)\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n*/\n\nimport React, { useState, useEffect, useRef } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport './styles/Quiz.css';\nimport Score from './Score';\nimport axios from 'axios';\n\nconst Quiz = () => {\n  const [questions, setQuestions] = useState([]);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showScore, setShowScore] = useState(false);\n  const [score, setScore] = useState(0);\n  const [isLoading, setIsLoading] = useState(true);\n  const [hasPostedResults, setHasPostedResults] = useState(false);\n  const [previousDifficulty, setPreviousDifficulty] = useState(null);\n\n  // Define variables here\n  let easyQuestions = [];\n  let mediumQuestions = [];\n  let hardQuestions = [];\n  let allQuestions = [];\n\nuseEffect(() => {\n  // Make an HTTP GET request to your backend API endpoint\n  axios\n    .get('http://localhost:8000/api/questions')\n    .then((response) => {\n      // Shuffle the questions for each difficulty level\n       easyQuestions = _.shuffle(response.data.filter((question) => question.difficulty === 'easy'));\n       mediumQuestions = _.shuffle(response.data.filter((question) => question.difficulty === 'medium'));\n       hardQuestions = _.shuffle(response.data.filter((question) => question.difficulty === 'hard'));\n\n      // Combine the shuffled questions into a single array\n     allQuestions = [...easyQuestions, ...mediumQuestions, ...hardQuestions];\n\n      // Set the questions state variable to all the shuffled questions\n      setQuestions(allQuestions);\n\n      // Set the current difficulty to 'easy'\n      let currentDifficulty = 'easy';\n\n      // Set the number of answered questions to 0\n      let answeredQuestions = 0;\n\n      // Set the score to 0\n      setScore(0);\n\n      // Set the current question index to 0\n      setCurrentQuestion(0);\n\n      setIsLoading(false);\n    })\n    .catch((error) => {\n      console.log(error);\n      setIsLoading(false);\n    });\n}, []);\n\n\n  const handleAnswerOptionClick = (isCorrect, difficulty) => {\n    let questionScore = 0;\n    if (isCorrect) {\n      if (difficulty === 'easy') {\n        questionScore = 1;\n      } else if (difficulty === 'medium') {\n        questionScore = 2;\n      } else if (difficulty === 'hard') {\n        questionScore = 3;\n      }\n      setScore(score + questionScore);\n    }\n\n   const nextQuestion = currentQuestion + 1;\n  if (nextQuestion < questions.length) {\n    setCurrentQuestion(nextQuestion);\n  } else {\n    setShowScore(true);\n  }\n};\n\n\n\nuseEffect(() => {\n  console.log('Current Score:', score);\n}, [score]);\n\n  return (\n    <div className=\"quiz\">\n      {isLoading ? (\n        <div className=\"loading\">Loading</div>\n      ) : showScore ? (\n        <Score\n          score={score}\n          totalQuestions={questions.length}\n          hasPostedResults={hasPostedResults}\n          setHasPostedResults={setHasPostedResults}\n        />\n      ) : (\n        <>\n          <div className=\"question-section\">\n            <div className=\"question-count\">\n              <span>Question {currentQuestion + 1}</span>/{questions.length}\n            </div>\n            <div className=\"question-text\">{questions[currentQuestion].question}</div>\n            <div className=\"difficulty-level\">\n              Difficulty level: {questions[currentQuestion].difficulty}\n            </div>\n          </div>\n          <div className=\"answer-section\">\n            {_.chunk(_.shuffle(questions[currentQuestion].options), 2).map((optionChunk) => (\n              <div className=\"answer-row\">\n                {optionChunk.map((option) => (\n                  <button\n                    onClick={() =>\n                      handleAnswerOptionClick(\n                        option === questions[currentQuestion].answer,\n                        questions[currentQuestion].difficulty\n                      )\n                    }\n                  >\n                    {option}\n                  </button>\n                ))}\n              </div>\n            ))}\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Quiz;\n\n\n\n\n\n"],"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"},"metadata":{},"sourceType":"module"}