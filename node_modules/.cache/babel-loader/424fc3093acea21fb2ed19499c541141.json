{"ast":null,"code":"import * as d3Shape from \"victory-vendor/d3-shape\";\nvar defined = function defined(d) {\n  var y = d._y1 !== undefined ? d._y1 : d._y;\n  return y !== null && y !== undefined && d._y0 !== null;\n};\nvar getXAccessor = function getXAccessor(scale) {\n  return function (d) {\n    return scale.x(d._x1 !== undefined ? d._x1 : d._x);\n  };\n};\nvar getYAccessor = function getYAccessor(scale) {\n  return function (d) {\n    return scale.y(d._y1 !== undefined ? d._y1 : d._y);\n  };\n};\nvar getAngleAccessor = function getAngleAccessor(scale) {\n  return function (d) {\n    var x = scale.x(d._x1 !== undefined ? d._x1 : d._x);\n    return -1 * x + Math.PI / 2;\n  };\n};\nvar toNewName = function toNewName(interpolation) {\n  // d3 shape changed the naming scheme for interpolators from \"basis\" -> \"curveBasis\" etc.\n  var capitalize = function capitalize(s) {\n    return s && s[0].toUpperCase() + s.slice(1);\n  };\n  return \"curve\".concat(capitalize(interpolation));\n};\nvar toNewNameClosed = function toNewNameClosed(interpolation) {\n  return \"\".concat(toNewName(interpolation), \"Closed\");\n};\nexport var getInterpolationFunction = function getInterpolationFunction(props) {\n  var interpolation = props.interpolation;\n  if (typeof interpolation === \"function\") {\n    return interpolation;\n  }\n  if (typeof interpolation === \"string\") {\n    var polar = props.polar,\n      _props$openCurve = props.openCurve,\n      openCurve = _props$openCurve === void 0 ? !polar : _props$openCurve;\n    var interpolationName = !openCurve ? toNewNameClosed(interpolation) : toNewName(interpolation);\n    return d3Shape[interpolationName];\n  }\n  return d3Shape.curveLinear;\n};\nexport var getLineFunction = function getLineFunction(props) {\n  var polar = props.polar,\n    scale = props.scale,\n    horizontal = props.horizontal;\n  return polar ? d3Shape.lineRadial().defined(defined).curve(getInterpolationFunction(props)).angle(getAngleAccessor(scale)).radius(getYAccessor(scale)) : d3Shape.line().defined(defined).curve(getInterpolationFunction(props)).x(horizontal ? getYAccessor(scale) : getXAccessor(scale)).y(horizontal ? getXAccessor(scale) : getYAccessor(scale));\n};","map":null,"metadata":{},"sourceType":"module"}