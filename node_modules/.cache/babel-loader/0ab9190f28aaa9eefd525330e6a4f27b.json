{"ast":null,"code":"/*\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Practice.css';\n\nimport correctImage from '../images/correct.png';\nimport incorrectImage from '../images/incorrect.png';\nimport {practiceData} from './practiceData';\nconst Practice = () => {\n  const [questions, setQuestions] = useState(_.shuffle(practiceData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showFinishButton, setShowFinishButton] = useState(false);\n  const [answerStatus, setAnswerStatus] = useState(null);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n\n  useEffect(() => {\n    setShowFinishButton(currentQuestion === questions.length - 1);\n    if (answerStatus === null) {\n      setShuffledOptions(_.shuffle(questions[currentQuestion].options));\n    }\n  }, [currentQuestion, questions, answerStatus]);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setAnswerStatus('correct');\n    } else {\n      setAnswerStatus('incorrect');\n    }\n\n    setTimeout(() => {\n      const nextQuestion = currentQuestion + 1;\n      if (nextQuestion < questions.length) {\n        setCurrentQuestion(nextQuestion);\n        setAnswerStatus(null);\n      } else {\n        setShowFinishButton(true);\n      }\n    }, 2000); // show answer status for 2.5 seconds before moving to next question\n  };\n\n  return (\n    <div className=\"practice-container\">\n      <div className=\"practice-question-section\">\n        <div className=\"practice-question-count\">\n          <span>Question {currentQuestion + 1}</span>/{questions.length}\n        </div>\n        <div className=\"practice-question-text\">{questions[currentQuestion].question}</div>\n        {answerStatus && (\n          <div className=\"practice-answer-status\">\n            <img src={answerStatus === 'correct' ? correctImage : incorrectImage} alt={answerStatus} />\n          </div>\n        )}\n      </div>\n      <div className=\"practice-answer-section\">\n        {shuffledOptions && _.chunk(shuffledOptions, 2).map((optionChunk, i) => (\n          <div className=\"practice-answer-row\" key={i}>\n            {optionChunk.map((option) => (\n              <button className=\"practice-btn practice-btn-outline-primary\" disabled={answerStatus} onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                {option}\n              </button>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"practice-navigation-section\">\n        <Link to=\"/\"> <button>Home</button></Link>\n        <button onClick={() => setCurrentQuestion(currentQuestion - 1)} disabled={currentQuestion === 0}>Previous</button>\n        {showFinishButton ? (\n          <Link to=\"/\"> <button>Finish</button></Link>\n        ) : (\n          <button onClick={() => setCurrentQuestion(currentQuestion + 1)} disabled={answerStatus}>Next</button>\n        )}\n      </div> \n    </div>\n  );\n};\n\nexport default Practice;\n\n*/","map":{"version":3,"names":[],"sources":["/Users/anjaliagrawal/Desktop/ons/src/components/Practice.js"],"sourcesContent":["/*\n\nimport React, { useState, useEffect } from 'react';\nimport _ from 'lodash';\nimport { Link } from 'react-router-dom'\nimport './Practice.css';\n\nimport correctImage from '../images/correct.png';\nimport incorrectImage from '../images/incorrect.png';\nimport {practiceData} from './practiceData';\nconst Practice = () => {\n  const [questions, setQuestions] = useState(_.shuffle(practiceData));\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [showFinishButton, setShowFinishButton] = useState(false);\n  const [answerStatus, setAnswerStatus] = useState(null);\n  const [shuffledOptions, setShuffledOptions] = useState([]);\n\n  useEffect(() => {\n    setShowFinishButton(currentQuestion === questions.length - 1);\n    if (answerStatus === null) {\n      setShuffledOptions(_.shuffle(questions[currentQuestion].options));\n    }\n  }, [currentQuestion, questions, answerStatus]);\n\n  const handleAnswerOptionClick = (isCorrect) => {\n    if (isCorrect) {\n      setAnswerStatus('correct');\n    } else {\n      setAnswerStatus('incorrect');\n    }\n\n    setTimeout(() => {\n      const nextQuestion = currentQuestion + 1;\n      if (nextQuestion < questions.length) {\n        setCurrentQuestion(nextQuestion);\n        setAnswerStatus(null);\n      } else {\n        setShowFinishButton(true);\n      }\n    }, 2000); // show answer status for 2.5 seconds before moving to next question\n  };\n\n  return (\n    <div className=\"practice-container\">\n      <div className=\"practice-question-section\">\n        <div className=\"practice-question-count\">\n          <span>Question {currentQuestion + 1}</span>/{questions.length}\n        </div>\n        <div className=\"practice-question-text\">{questions[currentQuestion].question}</div>\n        {answerStatus && (\n          <div className=\"practice-answer-status\">\n            <img src={answerStatus === 'correct' ? correctImage : incorrectImage} alt={answerStatus} />\n          </div>\n        )}\n      </div>\n      <div className=\"practice-answer-section\">\n        {shuffledOptions && _.chunk(shuffledOptions, 2).map((optionChunk, i) => (\n          <div className=\"practice-answer-row\" key={i}>\n            {optionChunk.map((option) => (\n              <button className=\"practice-btn practice-btn-outline-primary\" disabled={answerStatus} onClick={() => handleAnswerOptionClick(option === questions[currentQuestion].answer)}>\n                {option}\n              </button>\n            ))}\n          </div>\n        ))}\n      </div>\n      <div className=\"practice-navigation-section\">\n        <Link to=\"/\"> <button>Home</button></Link>\n        <button onClick={() => setCurrentQuestion(currentQuestion - 1)} disabled={currentQuestion === 0}>Previous</button>\n        {showFinishButton ? (\n          <Link to=\"/\"> <button>Finish</button></Link>\n        ) : (\n          <button onClick={() => setCurrentQuestion(currentQuestion + 1)} disabled={answerStatus}>Next</button>\n        )}\n      </div> \n    </div>\n  );\n};\n\nexport default Practice;\n\n*/\n\n\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module"}