{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n  return keys;\n}\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n  return target;\n}\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport { CommonProps, LineHelpers } from \"victory-core\";\nimport { useCanvasContext } from \"./hooks/use-canvas-context\";\nvar CanvasCurve = function CanvasCurve(props) {\n  var _useCanvasContext = useCanvasContext(),\n    canvasRef = _useCanvasContext.canvasRef,\n    clear = _useCanvasContext.clear,\n    clip = _useCanvasContext.clip;\n  var style = props.style,\n    data = props.data;\n  var stroke = style.stroke,\n    strokeWidth = style.strokeWidth;\n  var draw = React.useCallback(function (ctx) {\n    var line = LineHelpers.getLineFunction(props);\n    ctx.strokeStyle = stroke;\n    ctx.lineWidth = strokeWidth;\n    line.context(ctx)(data);\n    ctx.stroke();\n  }, [data, props, stroke, strokeWidth]);\n  React.useEffect(function () {\n    var ctx = canvasRef.current.getContext(\"2d\");\n    clear(ctx);\n    draw(ctx);\n    clip(ctx);\n  }, [canvasRef, draw, clear, clip]);\n  return null;\n};\nCanvasCurve.propTypes = _objectSpread(_objectSpread({}, CommonProps.primitiveProps), {}, {\n  interpolation: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n  openCurve: PropTypes.bool,\n  origin: PropTypes.object,\n  polar: PropTypes.bool\n});\nexport default CanvasCurve;","map":null,"metadata":{},"sourceType":"module"}